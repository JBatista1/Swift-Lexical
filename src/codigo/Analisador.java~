/* The following code was generated by JFlex 1.4.3 on 22/02/21 20:13 */

package codigo;
import static codigo.Tokens.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 22/02/21 20:13 from the specification file
 * <tt>C:/Users/joao batista/Documents/NetBeansProjects/AnalisadorLexicoSwift/src/codigo/Lexer.flex</tt>
 */
public class Analisador {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int CHAR = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\7\1\76"+
    "\2\0\1\21\1\25\1\0\1\33\1\34\1\17\1\15\1\13\1\16"+
    "\1\11\1\20\12\5\1\36\1\35\1\23\1\22\1\24\1\10\1\0"+
    "\1\66\1\74\1\73\1\71\1\75\1\70\2\4\1\67\11\4\1\72"+
    "\7\4\1\12\1\77\1\14\1\27\1\6\1\0\1\42\1\37\1\44"+
    "\1\47\1\41\1\51\1\65\1\60\1\54\1\4\1\43\1\46\1\62"+
    "\1\55\1\50\1\56\1\4\1\40\1\45\1\52\1\53\1\64\1\57"+
    "\1\63\1\61\1\4\1\31\1\26\1\32\1\30\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\30\3\1\35\1\36"+
    "\1\37\1\1\1\40\1\0\1\41\1\0\1\42\5\0"+
    "\1\43\1\44\1\45\1\46\1\47\1\0\1\2\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\17\3\1\63\7\3\1\64\1\65\16\3"+
    "\1\66\1\67\1\70\1\71\1\72\1\4\1\73\2\0"+
    "\1\74\1\75\1\76\10\0\1\77\1\100\1\101\17\3"+
    "\1\102\4\3\1\103\10\3\1\104\5\3\1\105\1\3"+
    "\1\106\1\107\5\3\1\110\1\111\1\112\1\0\1\73"+
    "\2\0\1\113\5\0\1\2\4\3\1\114\1\115\2\3"+
    "\1\116\2\3\1\117\10\3\1\120\2\3\1\121\1\3"+
    "\1\122\3\3\1\123\13\3\1\124\1\125\1\73\7\0"+
    "\1\126\5\3\1\127\3\3\1\130\1\3\1\131\3\3"+
    "\1\132\3\3\1\133\3\3\1\134\2\3\1\135\1\136"+
    "\1\137\1\140\2\3\3\0\1\141\1\3\1\142\3\3"+
    "\1\143\1\144\1\145\1\3\1\146\5\3\1\147\2\3"+
    "\1\150\1\151\1\152\2\0\4\3\1\153\6\3\1\154"+
    "\1\0\1\155\2\3\1\156\1\157\3\3\1\160\1\161"+
    "\1\162\3\3\1\163\4\3\1\164\1\165\2\3\1\166";

  private static int [] zzUnpackAction() {
    int [] result = new int[356];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\300\0\u0140\0\u0180"+
    "\0\u01c0\0\300\0\u0200\0\u0240\0\300\0\300\0\u0280\0\u02c0"+
    "\0\u0300\0\u0340\0\u0380\0\u03c0\0\u0400\0\u0440\0\u0480\0\u04c0"+
    "\0\300\0\300\0\300\0\300\0\300\0\300\0\300\0\300"+
    "\0\u0500\0\u0540\0\u0580\0\u05c0\0\u0600\0\u0640\0\u0680\0\u06c0"+
    "\0\u0700\0\u0740\0\u0780\0\u07c0\0\u0800\0\u0840\0\u0880\0\u08c0"+
    "\0\u0900\0\u0940\0\u0980\0\u09c0\0\u0a00\0\u0a40\0\u0a80\0\u0ac0"+
    "\0\300\0\u0b00\0\300\0\u0b40\0\300\0\u0b80\0\u0bc0\0\u0c00"+
    "\0\u0c40\0\u0c80\0\u0cc0\0\u0d00\0\u0d40\0\u0d80\0\u0dc0\0\300"+
    "\0\300\0\300\0\300\0\u0e00\0\u0e40\0\300\0\300\0\u0e80"+
    "\0\300\0\u0ec0\0\300\0\u0f00\0\300\0\300\0\300\0\300"+
    "\0\u0f40\0\u0f80\0\u0fc0\0\u1000\0\u1040\0\u1080\0\u10c0\0\u1100"+
    "\0\u1140\0\u1180\0\u11c0\0\u1200\0\u1240\0\u1280\0\u12c0\0\u0140"+
    "\0\u1300\0\u1340\0\u1380\0\u13c0\0\u1400\0\u1440\0\u1480\0\u0140"+
    "\0\u14c0\0\u1500\0\u1540\0\u1580\0\u15c0\0\u1600\0\u1640\0\u1680"+
    "\0\u16c0\0\u1700\0\u1740\0\u1780\0\u17c0\0\u1800\0\u1840\0\300"+
    "\0\300\0\300\0\300\0\u1880\0\u18c0\0\u1900\0\u1940\0\u1980"+
    "\0\300\0\300\0\300\0\u19c0\0\u1a00\0\u1a40\0\u1a80\0\u1ac0"+
    "\0\u1b00\0\u1b40\0\u1b80\0\300\0\300\0\300\0\u1bc0\0\u1c00"+
    "\0\u1c40\0\u1c80\0\u1cc0\0\u1d00\0\u1d40\0\u1d80\0\u1dc0\0\u1e00"+
    "\0\u1e40\0\u1e80\0\u1ec0\0\u1f00\0\u1f40\0\u0140\0\u1f80\0\u1fc0"+
    "\0\u2000\0\u2040\0\u0140\0\u2080\0\u20c0\0\u2100\0\u2140\0\u2180"+
    "\0\u21c0\0\u2200\0\u2240\0\u0140\0\u2280\0\u22c0\0\u2300\0\u2340"+
    "\0\u2380\0\u0140\0\u23c0\0\u0140\0\u0140\0\u2400\0\u2440\0\u2480"+
    "\0\u24c0\0\u2500\0\300\0\300\0\300\0\u2540\0\u1940\0\u2580"+
    "\0\u25c0\0\300\0\u2600\0\u2640\0\u2680\0\u0dc0\0\u26c0\0\u0e00"+
    "\0\u2700\0\u2740\0\u2780\0\u27c0\0\u0140\0\u0140\0\u2800\0\u2840"+
    "\0\u0140\0\u2880\0\u28c0\0\u0140\0\u2900\0\u2940\0\u2980\0\u29c0"+
    "\0\u2a00\0\u2a40\0\u2a80\0\u2ac0\0\u0140\0\u2b00\0\u2b40\0\u0140"+
    "\0\u2b80\0\u0140\0\u2bc0\0\u2c00\0\u2c40\0\u0140\0\u2c80\0\u2cc0"+
    "\0\u2d00\0\u2d40\0\u2d80\0\u2dc0\0\u2e00\0\u2e40\0\u2e80\0\u2ec0"+
    "\0\u2f00\0\u0140\0\u0140\0\u2f40\0\u2f80\0\u2fc0\0\u3000\0\u3040"+
    "\0\u3080\0\u30c0\0\u3100\0\u0140\0\u3140\0\u3180\0\u31c0\0\u3200"+
    "\0\u3240\0\u0140\0\u3280\0\u32c0\0\u3300\0\u0140\0\u3340\0\u0140"+
    "\0\u3380\0\u33c0\0\u3400\0\u0140\0\u3440\0\u3480\0\u34c0\0\u0140"+
    "\0\u3500\0\u3540\0\u3580\0\u0140\0\u35c0\0\u3600\0\u0140\0\u0140"+
    "\0\u0140\0\u0140\0\u3640\0\u3680\0\u36c0\0\u3700\0\u3740\0\u0140"+
    "\0\u3780\0\u0140\0\u37c0\0\u3800\0\u3840\0\u0140\0\u0140\0\u0140"+
    "\0\u3880\0\u0140\0\u38c0\0\u3900\0\u3940\0\u3980\0\u39c0\0\u0140"+
    "\0\u3a00\0\u3a40\0\u0140\0\u0140\0\u0140\0\u3a80\0\u3ac0\0\u3b00"+
    "\0\u3b40\0\u3b80\0\u3bc0\0\u0140\0\u3c00\0\u3c40\0\u3c80\0\u3cc0"+
    "\0\u3d00\0\u3d40\0\u0140\0\u3d80\0\u0140\0\u3dc0\0\u3e00\0\u0140"+
    "\0\u0140\0\u3e40\0\u3e80\0\u3ec0\0\u0140\0\u0140\0\u0140\0\u3f00"+
    "\0\u3f40\0\u3f80\0\u0140\0\u3fc0\0\u4000\0\u4040\0\u4080\0\u0140"+
    "\0\u0140\0\u40c0\0\u4100\0\u0140";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[356];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\10\1\7\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\7\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\7\1\54\1\55\1\56\1\57\4\7"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\7\1\71\1\4\1\72\2\4\73\72\1\73"+
    "\1\74\100\4\102\0\1\6\101\0\3\7\2\75\26\0"+
    "\37\7\7\0\1\10\1\76\2\0\1\77\27\0\1\100"+
    "\33\0\1\100\24\0\1\101\62\0\1\77\3\0\1\102"+
    "\72\0\1\103\1\104\1\105\3\0\1\106\1\0\1\107"+
    "\22\0\37\103\24\0\1\110\77\0\1\111\1\0\1\112"+
    "\75\0\1\113\74\0\1\114\1\115\1\0\1\116\77\0"+
    "\1\117\77\0\1\120\77\0\1\121\1\122\76\0\1\123"+
    "\1\0\1\124\75\0\1\125\2\0\1\126\74\0\1\127"+
    "\3\0\1\130\55\0\3\7\2\75\26\0\1\7\1\131"+
    "\35\7\6\0\3\7\2\75\26\0\2\7\1\132\34\7"+
    "\6\0\3\7\2\75\26\0\7\7\1\133\6\7\1\134"+
    "\5\7\1\135\12\7\6\0\3\7\2\75\26\0\6\7"+
    "\1\136\30\7\6\0\3\7\2\75\26\0\3\7\1\137"+
    "\3\7\1\140\1\7\1\141\25\7\6\0\3\7\2\75"+
    "\26\0\2\7\1\142\10\7\1\143\1\144\3\7\1\145"+
    "\16\7\6\0\3\7\2\75\26\0\2\7\1\146\34\7"+
    "\6\0\3\7\2\75\26\0\2\7\1\147\6\7\1\150"+
    "\25\7\6\0\3\7\2\75\26\0\17\7\1\151\17\7"+
    "\6\0\3\7\2\75\26\0\3\7\1\152\5\7\1\153"+
    "\2\7\1\154\1\155\21\7\6\0\3\7\2\75\26\0"+
    "\1\7\1\156\20\7\1\157\14\7\6\0\3\7\2\75"+
    "\26\0\12\7\1\160\3\7\1\161\4\7\1\162\13\7"+
    "\6\0\3\7\2\75\26\0\15\7\1\163\21\7\6\0"+
    "\3\7\2\75\26\0\1\7\1\164\12\7\1\165\22\7"+
    "\6\0\3\7\2\75\26\0\21\7\1\166\15\7\6\0"+
    "\3\7\2\75\26\0\3\7\1\167\33\7\6\0\3\7"+
    "\2\75\26\0\14\7\1\170\22\7\6\0\3\7\2\75"+
    "\26\0\16\7\1\171\20\7\6\0\3\7\2\75\26\0"+
    "\16\7\1\172\20\7\6\0\3\7\2\75\26\0\7\7"+
    "\1\173\27\7\6\0\3\7\2\75\26\0\11\7\1\174"+
    "\25\7\6\0\3\7\2\75\26\0\13\7\1\175\23\7"+
    "\6\0\3\7\2\75\26\0\21\7\1\176\15\7\6\0"+
    "\3\7\2\75\26\0\11\7\1\177\25\7\2\0\1\72"+
    "\2\0\73\72\42\0\1\200\11\0\1\201\2\0\1\202"+
    "\20\0\1\203\1\204\5\0\1\205\77\0\1\77\33\0"+
    "\1\100\33\0\1\100\7\0\1\206\3\0\1\207\3\0"+
    "\2\210\103\0\1\211\66\0\1\212\11\0\1\213\60\0"+
    "\2\103\1\105\4\0\1\214\1\107\22\0\37\103\6\0"+
    "\2\104\5\0\1\214\23\0\37\104\6\0\3\105\5\0"+
    "\1\107\22\0\37\105\6\0\1\215\1\216\1\217\5\0"+
    "\1\220\22\0\37\215\14\0\1\221\1\222\64\0\17\114"+
    "\1\223\60\114\2\115\1\0\75\115\22\0\1\224\77\0"+
    "\1\225\77\0\1\226\61\0\3\7\2\75\26\0\2\7"+
    "\1\227\34\7\6\0\3\7\2\75\26\0\13\7\1\230"+
    "\3\7\1\231\17\7\6\0\3\7\2\75\26\0\6\7"+
    "\1\232\30\7\6\0\3\7\2\75\26\0\14\7\1\233"+
    "\22\7\6\0\3\7\2\75\26\0\13\7\1\234\23\7"+
    "\6\0\3\7\2\75\26\0\6\7\1\235\30\7\6\0"+
    "\3\7\2\75\26\0\6\7\1\236\30\7\6\0\3\7"+
    "\2\75\26\0\3\7\1\237\33\7\6\0\3\7\2\75"+
    "\26\0\16\7\1\240\20\7\6\0\3\7\2\75\26\0"+
    "\7\7\1\241\27\7\6\0\3\7\2\75\26\0\1\7"+
    "\1\242\1\7\1\243\33\7\6\0\3\7\2\75\26\0"+
    "\17\7\1\244\17\7\6\0\3\7\2\75\26\0\15\7"+
    "\1\245\21\7\6\0\3\7\2\75\26\0\13\7\1\246"+
    "\23\7\6\0\3\7\2\75\26\0\12\7\1\247\2\7"+
    "\1\250\21\7\6\0\3\7\2\75\26\0\2\7\1\251"+
    "\34\7\6\0\3\7\2\75\26\0\7\7\1\252\27\7"+
    "\6\0\3\7\2\75\26\0\1\7\1\253\35\7\6\0"+
    "\3\7\2\75\26\0\16\7\1\254\20\7\6\0\3\7"+
    "\2\75\26\0\7\7\1\255\27\7\6\0\3\7\2\75"+
    "\26\0\14\7\1\256\22\7\6\0\3\7\2\75\26\0"+
    "\17\7\1\257\17\7\6\0\3\7\2\75\26\0\11\7"+
    "\1\260\1\7\1\261\1\7\1\262\21\7\6\0\3\7"+
    "\2\75\26\0\17\7\1\263\17\7\6\0\3\7\2\75"+
    "\26\0\7\7\1\264\27\7\6\0\3\7\2\75\26\0"+
    "\11\7\1\265\3\7\1\266\21\7\6\0\3\7\2\75"+
    "\26\0\1\267\36\7\6\0\3\7\2\75\26\0\2\7"+
    "\1\270\12\7\1\271\21\7\6\0\3\7\2\75\26\0"+
    "\1\7\1\272\35\7\6\0\3\7\2\75\26\0\3\7"+
    "\1\273\33\7\6\0\3\7\2\75\26\0\22\7\1\274"+
    "\14\7\6\0\3\7\2\75\26\0\13\7\1\275\23\7"+
    "\6\0\3\7\2\75\26\0\11\7\1\276\25\7\6\0"+
    "\3\7\2\75\26\0\14\7\1\277\22\7\6\0\3\7"+
    "\2\75\26\0\1\7\1\300\35\7\6\0\3\7\2\75"+
    "\26\0\3\7\1\301\33\7\6\0\3\7\2\75\26\0"+
    "\11\7\1\302\25\7\42\0\1\303\11\0\1\304\2\0"+
    "\1\305\27\0\1\205\1\76\32\0\1\100\33\0\1\100"+
    "\7\0\1\206\1\306\2\0\1\307\73\0\1\307\77\0"+
    "\1\206\3\0\1\207\72\0\2\310\31\0\37\310\6\0"+
    "\2\215\1\217\4\0\1\311\1\220\22\0\37\215\6\0"+
    "\2\216\5\0\1\311\23\0\37\216\6\0\3\217\5\0"+
    "\1\220\22\0\37\217\14\0\1\106\1\222\1\312\67\0"+
    "\1\313\1\314\1\315\5\0\1\316\22\0\37\313\14\0"+
    "\1\317\65\0\17\114\1\223\1\320\57\114\4\0\3\7"+
    "\2\75\26\0\3\7\1\321\33\7\6\0\3\7\2\75"+
    "\26\0\14\7\1\322\4\7\1\323\15\7\6\0\3\7"+
    "\2\75\26\0\2\7\1\324\34\7\6\0\3\7\2\75"+
    "\26\0\2\7\1\325\34\7\6\0\3\7\2\75\26\0"+
    "\23\7\1\326\13\7\6\0\3\7\2\75\26\0\2\7"+
    "\1\327\34\7\6\0\3\7\2\75\26\0\11\7\1\330"+
    "\25\7\6\0\3\7\2\75\26\0\2\7\1\331\34\7"+
    "\6\0\3\7\2\75\26\0\6\7\1\332\30\7\6\0"+
    "\3\7\2\75\26\0\13\7\1\333\23\7\6\0\3\7"+
    "\2\75\26\0\12\7\1\334\24\7\6\0\3\7\2\75"+
    "\26\0\14\7\1\335\22\7\6\0\3\7\2\75\26\0"+
    "\13\7\1\336\23\7\6\0\3\7\2\75\26\0\2\7"+
    "\1\337\34\7\6\0\3\7\2\75\26\0\13\7\1\340"+
    "\23\7\6\0\3\7\2\75\26\0\2\7\1\341\1\342"+
    "\33\7\6\0\3\7\2\75\26\0\16\7\1\343\20\7"+
    "\6\0\3\7\2\75\26\0\1\7\1\344\14\7\1\345"+
    "\20\7\6\0\3\7\2\75\26\0\6\7\1\346\1\347"+
    "\27\7\6\0\3\7\2\75\26\0\5\7\1\350\31\7"+
    "\6\0\3\7\2\75\26\0\2\7\1\351\34\7\6\0"+
    "\3\7\2\75\26\0\2\7\1\352\34\7\6\0\3\7"+
    "\2\75\26\0\2\7\1\353\34\7\6\0\3\7\2\75"+
    "\26\0\14\7\1\354\22\7\6\0\3\7\2\75\26\0"+
    "\2\7\1\355\34\7\6\0\3\7\2\75\26\0\13\7"+
    "\1\356\23\7\6\0\3\7\2\75\26\0\11\7\1\357"+
    "\25\7\6\0\3\7\2\75\26\0\13\7\1\360\23\7"+
    "\6\0\3\7\2\75\26\0\16\7\1\361\6\7\1\362"+
    "\11\7\6\0\3\7\2\75\26\0\7\7\1\363\27\7"+
    "\6\0\3\7\2\75\26\0\1\7\1\364\35\7\6\0"+
    "\3\7\2\75\26\0\7\7\1\365\27\7\6\0\3\7"+
    "\2\75\26\0\1\7\1\366\35\7\6\0\3\7\2\75"+
    "\26\0\3\7\1\367\33\7\6\0\3\7\2\75\26\0"+
    "\1\370\36\7\6\0\3\7\2\75\26\0\15\7\1\371"+
    "\21\7\6\0\3\7\2\75\26\0\1\7\1\372\35\7"+
    "\6\0\3\7\2\75\26\0\7\7\1\373\27\7\7\0"+
    "\1\374\76\0\2\375\6\0\1\107\22\0\37\375\6\0"+
    "\2\376\31\0\37\376\6\0\2\313\1\315\4\0\1\377"+
    "\1\316\22\0\37\313\6\0\2\314\5\0\1\377\23\0"+
    "\37\314\6\0\3\315\5\0\1\316\22\0\37\315\6\0"+
    "\1\u0100\1\u0101\1\u0102\5\0\1\u0103\22\0\37\u0100\6\0"+
    "\3\7\2\75\26\0\4\7\1\u0104\32\7\6\0\3\7"+
    "\2\75\26\0\1\7\1\u0105\35\7\6\0\3\7\2\75"+
    "\26\0\1\7\1\u0106\35\7\6\0\3\7\2\75\26\0"+
    "\3\7\1\u0107\33\7\6\0\3\7\2\75\26\0\16\7"+
    "\1\u0108\20\7\6\0\3\7\2\75\26\0\5\7\1\u0109"+
    "\31\7\6\0\3\7\2\75\26\0\6\7\1\u010a\30\7"+
    "\6\0\3\7\2\75\26\0\15\7\1\u010b\21\7\6\0"+
    "\3\7\2\75\26\0\5\7\1\u010c\31\7\6\0\3\7"+
    "\2\75\26\0\15\7\1\u010d\21\7\6\0\3\7\2\75"+
    "\26\0\1\7\1\u010e\35\7\6\0\3\7\2\75\26\0"+
    "\5\7\1\u010f\31\7\6\0\3\7\2\75\26\0\1\7"+
    "\1\u0110\35\7\6\0\3\7\2\75\26\0\14\7\1\u0111"+
    "\22\7\6\0\3\7\2\75\26\0\15\7\1\u0112\21\7"+
    "\6\0\3\7\2\75\26\0\3\7\1\u0113\33\7\6\0"+
    "\3\7\2\75\26\0\2\7\1\u0114\34\7\6\0\3\7"+
    "\2\75\26\0\13\7\1\u0115\23\7\6\0\3\7\2\75"+
    "\26\0\17\7\1\u0116\17\7\6\0\3\7\2\75\26\0"+
    "\3\7\1\u0117\33\7\6\0\3\7\2\75\26\0\13\7"+
    "\1\u0118\23\7\6\0\3\7\2\75\26\0\1\7\1\u0119"+
    "\35\7\6\0\3\7\2\75\26\0\1\7\1\u011a\35\7"+
    "\6\0\3\7\2\75\26\0\11\7\1\u011b\25\7\6\0"+
    "\3\7\2\75\26\0\13\7\1\u011c\23\7\6\0\3\7"+
    "\2\75\26\0\3\7\1\u011d\33\7\6\0\3\7\2\75"+
    "\26\0\15\7\1\u011e\21\7\6\0\3\7\2\75\26\0"+
    "\2\7\1\u011f\34\7\6\0\3\7\2\75\26\0\2\7"+
    "\1\u0120\34\7\6\0\3\7\2\75\26\0\10\7\1\u0121"+
    "\26\7\6\0\3\7\2\75\26\0\13\7\1\u0122\23\7"+
    "\6\0\3\7\2\75\26\0\7\7\1\u0123\27\7\6\0"+
    "\3\7\2\75\26\0\16\7\1\u0124\20\7\7\0\1\374"+
    "\1\306\75\0\2\375\5\0\1\214\1\107\22\0\37\375"+
    "\6\0\2\u0125\6\0\1\220\22\0\37\u0125\6\0\2\u0126"+
    "\31\0\37\u0126\6\0\2\u0100\1\u0102\4\0\1\u0127\1\u0103"+
    "\22\0\37\u0100\6\0\2\u0101\5\0\1\u0127\23\0\37\u0101"+
    "\6\0\3\u0102\5\0\1\u0103\22\0\37\u0102\14\0\1\317"+
    "\1\0\1\312\67\0\3\7\2\75\26\0\16\7\1\u0128"+
    "\20\7\6\0\3\7\2\75\26\0\11\7\1\u0129\25\7"+
    "\6\0\3\7\2\75\26\0\13\7\1\u012a\23\7\6\0"+
    "\3\7\2\75\26\0\6\7\1\u012b\30\7\6\0\3\7"+
    "\2\75\26\0\15\7\1\u012c\21\7\6\0\3\7\2\75"+
    "\26\0\16\7\1\u012d\20\7\6\0\3\7\2\75\26\0"+
    "\13\7\1\u012e\23\7\6\0\3\7\2\75\26\0\5\7"+
    "\1\u012f\31\7\6\0\3\7\2\75\26\0\21\7\1\u0130"+
    "\15\7\6\0\3\7\2\75\26\0\7\7\1\u0131\27\7"+
    "\6\0\3\7\2\75\26\0\13\7\1\u0132\23\7\6\0"+
    "\3\7\2\75\26\0\13\7\1\u0133\23\7\6\0\3\7"+
    "\2\75\26\0\21\7\1\u0134\15\7\6\0\3\7\2\75"+
    "\26\0\1\7\1\u0135\35\7\6\0\3\7\2\75\26\0"+
    "\7\7\1\u0136\27\7\6\0\3\7\2\75\26\0\16\7"+
    "\1\u0137\20\7\6\0\3\7\2\75\26\0\13\7\1\u0138"+
    "\23\7\6\0\3\7\2\75\26\0\5\7\1\u0139\31\7"+
    "\6\0\3\7\2\75\26\0\13\7\1\u013a\23\7\6\0"+
    "\3\7\2\75\26\0\5\7\1\u013b\31\7\6\0\3\7"+
    "\2\75\26\0\2\7\1\u013c\34\7\6\0\3\7\2\75"+
    "\26\0\26\7\1\u013d\10\7\6\0\2\u0125\5\0\1\311"+
    "\1\220\22\0\37\u0125\6\0\2\u013e\6\0\1\316\22\0"+
    "\37\u013e\6\0\2\u013f\31\0\37\u013f\6\0\3\7\2\75"+
    "\26\0\20\7\1\u0140\16\7\6\0\3\7\2\75\26\0"+
    "\15\7\1\u0141\21\7\6\0\3\7\2\75\26\0\3\7"+
    "\1\u0142\33\7\6\0\3\7\2\75\26\0\14\7\1\u0143"+
    "\22\7\6\0\3\7\2\75\26\0\13\7\1\u0144\23\7"+
    "\6\0\3\7\2\75\26\0\11\7\1\u0145\25\7\6\0"+
    "\3\7\2\75\26\0\1\7\1\u0146\35\7\6\0\3\7"+
    "\2\75\26\0\15\7\1\u0147\21\7\6\0\3\7\2\75"+
    "\26\0\15\7\1\u0148\21\7\6\0\3\7\2\75\26\0"+
    "\3\7\1\u0149\33\7\6\0\3\7\2\75\26\0\11\7"+
    "\1\u014a\25\7\6\0\3\7\2\75\26\0\2\7\1\u014b"+
    "\34\7\6\0\2\u013e\5\0\1\377\1\316\22\0\37\u013e"+
    "\6\0\2\u014c\6\0\1\u0103\22\0\37\u014c\6\0\3\7"+
    "\2\75\26\0\6\7\1\u014d\30\7\6\0\3\7\2\75"+
    "\26\0\11\7\1\u014e\25\7\6\0\3\7\2\75\26\0"+
    "\13\7\1\u014f\23\7\6\0\3\7\2\75\26\0\2\7"+
    "\1\u0150\34\7\6\0\3\7\2\75\26\0\1\7\1\u0151"+
    "\35\7\6\0\3\7\2\75\26\0\11\7\1\u0152\25\7"+
    "\6\0\3\7\2\75\26\0\25\7\1\u0153\11\7\6\0"+
    "\3\7\2\75\26\0\3\7\1\u0154\33\7\6\0\3\7"+
    "\2\75\26\0\7\7\1\u0155\27\7\6\0\3\7\2\75"+
    "\26\0\7\7\1\u0156\27\7\6\0\2\u014c\5\0\1\u0127"+
    "\1\u0103\22\0\37\u014c\6\0\3\7\2\75\26\0\16\7"+
    "\1\u0157\20\7\6\0\3\7\2\75\26\0\2\7\1\u0158"+
    "\34\7\6\0\3\7\2\75\26\0\14\7\1\u0159\22\7"+
    "\6\0\3\7\2\75\26\0\3\7\1\u015a\33\7\6\0"+
    "\3\7\2\75\26\0\6\7\1\u015b\30\7\6\0\3\7"+
    "\2\75\26\0\10\7\1\u015c\26\7\6\0\3\7\2\75"+
    "\26\0\26\7\1\u015d\10\7\6\0\3\7\2\75\26\0"+
    "\13\7\1\u015e\23\7\6\0\3\7\2\75\26\0\13\7"+
    "\1\u015f\23\7\6\0\3\7\2\75\26\0\21\7\1\u0160"+
    "\15\7\6\0\3\7\2\75\26\0\2\7\1\u0161\34\7"+
    "\6\0\3\7\2\75\26\0\22\7\1\u0162\14\7\6\0"+
    "\3\7\2\75\26\0\17\7\1\u0163\17\7\6\0\3\7"+
    "\2\75\26\0\2\7\1\u0164\34\7\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16704];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\3\1\1\11\2\1\2\11"+
    "\12\1\10\11\30\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\0\1\1\1\0\1\1\5\0\1\1\4\11\1\0"+
    "\1\1\2\11\1\1\1\11\1\1\1\11\1\1\4\11"+
    "\47\1\4\11\3\1\2\0\3\11\10\0\3\11\54\1"+
    "\3\11\1\0\1\1\2\0\1\11\5\0\55\1\7\0"+
    "\41\1\3\0\26\1\2\0\14\1\1\0\30\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[356];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	StringBuffer string = new StringBuffer();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analisador(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Analisador(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 156) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 28: 
          { return new Tokens("DOISPONTOS", yytext(), yyline, yycolumn,"Aplicado no operador ternário");
          }
        case 119: break;
        case 20: 
          { return new Tokens("BITOR", yytext(), yyline, yycolumn, "Operador OR binário: 1010 | 0011 = 1011");
          }
        case 120: break;
        case 45: 
          { return new Tokens("MAIORIGUAL", yytext(), yyline, yycolumn, "Retorna true se o operando da esquerda for maior ou igual que o da direita: b>a");
          }
        case 121: break;
        case 52: 
          { return new Tokens("IF", yytext(), yyline, yycolumn, "Expressãos usadas para execução condicional. Os valores false e nil são falsos, e tudo o mais é verdade.");
          }
        case 122: break;
        case 29: 
          { yybegin(STRING); string.setLength(0);
          }
        case 123: break;
        case 91: 
          { return new Tokens("INOUT", yytext(), yyline, yycolumn, "Um valor que é passado para uma função e modificado por ela, e é passado de volta para fora da função para substituir o valor original");
          }
        case 124: break;
        case 82: 
          { return new Tokens("TRUE", yytext(), yyline, yycolumn, "A única instância da classe TrueClass (valor verdadeiro típico)");
          }
        case 125: break;
        case 103: 
          { return new Tokens("IMPORT", yytext(), yyline, yycolumn, "Expõe uma estrutura ou aplicativo que é construído e enviado como uma única unidade no binário fornecido");
          }
        case 126: break;
        case 39: 
          { return new Tokens("MULTEQ", yytext(), yyline, yycolumn, "(a *= b) equivalente a (a = a * b)");
          }
        case 127: break;
        case 85: 
          { return new Tokens("BOOL", yytext(), yyline, yycolumn, "Define uma variavel ou retorno de uma função como Tipo Booleano podendo ser True ou False ");
          }
        case 128: break;
        case 58: 
          { string.append("\\");
          }
        case 129: break;
        case 23: 
          { return new Tokens("CHAVEABERTA", yytext(), yyline, yycolumn, "Usado para delimitar Hash: h = { 7 => 35, \"c\" => 2, \"a\" => 1 }");
          }
        case 130: break;
        case 107: 
          { return new Tokens("DEFAULT", yytext(), yyline, yycolumn, "Usado para cobrir quaisquer valores que não sejam explicitamente endereçados em um caso");
          }
        case 131: break;
        case 81: 
          { return new Tokens("FUNC", yytext(), yyline, yycolumn, "Pedaços de código autocontidos que executam uma tarefa específica");
          }
        case 132: break;
        case 111: 
          { return new Tokens("OPERATOR", yytext(), yyline, yycolumn, "Um símbolo ou frase especial que você usa para verificar, alterar ou combinar valores");
          }
        case 133: break;
        case 69: 
          { return new Tokens("VAR", yytext(), yyline, yycolumn, "Define uma variável como variável");
          }
        case 134: break;
        case 63: 
          { return new Tokens("IDENTIDADE", yytext(), yyline, yycolumn, "Verifica se duas instâncias de uma classe apontam para a mesma memoria:(classA == classA) retorna true, (classA == classB) retorna false");
          }
        case 135: break;
        case 117: 
          { return new Tokens("FILEPRIVATE", yytext(), yyline, yycolumn, "Uma construção de controle de acesso que restringe o escopo apenas ao arquivo de origem de definição");
          }
        case 136: break;
        case 74: 
          { string.append("\\n");
          }
        case 137: break;
        case 9: 
          { return new Tokens("VIRGULA", yytext(), yyline, yycolumn, "Usado para separar identificadores e dados: \"ary = [1, \"two\", 3.0]\" ou \"Array.new(3, true)\".");
          }
        case 138: break;
        case 68: 
          { return new Tokens("NIL", yytext(), yyline, yycolumn, "É equivalente a Nulo.a única instância da Classe NilClass (representa falso)");
          }
        case 139: break;
        case 31: 
          { yybegin(YYINITIAL);
                              return new Tokens
                           ("STRING", string.toString(), yyline, yycolumn, "String, sequência de caracteres.");
          }
        case 140: break;
        case 94: 
          { return new Tokens("WHILE", yytext(), yyline, yycolumn, "Executa o corpo enquanto a expressão de condição retorna verdadeira.");
          }
        case 141: break;
        case 57: 
          { string.append('\"');
          }
        case 142: break;
        case 76: 
          { return new Tokens("ELSE", yytext(), yyline, yycolumn, "Representa a execução de um comando quando a condição não é validada");
          }
        case 143: break;
        case 27: 
          { return new Tokens("PONTOVIRG", yytext(), yyline, yycolumn, "Delimitador de instrução, pode ser omitido.");
          }
        case 144: break;
        case 17: 
          { return new Tokens("MENOR", yytext(), yyline, yycolumn, "Retorna true se o operando da esquerda for menor que o da direita: a<b");
          }
        case 145: break;
        case 26: 
          { return new Tokens("PARENTESEFECHADO", yytext(), yyline, yycolumn, "Usado para limitar um conjundo de dados: \"(1 + 2)*5\" ou \"for a in (1..6)\"");
          }
        case 146: break;
        case 50: 
          { return new Tokens("ORBOOL", yytext(), yyline, yycolumn, "Operador lógico, retorna true se pelomenos um dos operandos forem true");
          }
        case 147: break;
        case 105: 
          { return new Tokens("DOUBLE", yytext(), yyline, yycolumn, "Define uma variavel ou retorno de uma função como Tipo decimal com dobro de precisão de um float 0.58545854, 1.325");
          }
        case 148: break;
        case 72: 
          { string.append("\\r");
          }
        case 149: break;
        case 4: 
          { return new Tokens("INTEIRO", yytext(), yyline, yycolumn, "Valor de número inteiro.");
          }
        case 150: break;
        case 11: 
          { return new Tokens("SOMA", yytext(), yyline, yycolumn, "Operador de soma");
          }
        case 151: break;
        case 110: 
          { return new Tokens("CONTINUE", yytext(), yyline, yycolumn, "Termina a execução do programa da iteração atual de uma instrução de loop, mas não interrompe a execução da instrução de loop.");
          }
        case 152: break;
        case 73: 
          { string.append("\\t");
          }
        case 153: break;
        case 116: 
          { return new Tokens("FALLTHROUGH", yytext(), yyline, yycolumn, "Permite explicitamente que a execução continue de um caso para o outro em uma switch instrução");
          }
        case 154: break;
        case 66: 
          { return new Tokens("LET", yytext(), yyline, yycolumn, "Define uma variável como imutável");
          }
        case 155: break;
        case 24: 
          { return new Tokens("CHAVEFECHADA", yytext(), yyline, yycolumn, "Usado para delimitar Hash: h = { 7 => 35, \"c\" => 2, \"a\" => 1 }");
          }
        case 156: break;
        case 51: 
          { return new Tokens("DO", yytext(), yyline, yycolumn, "Define uma estrutura de repetição sem condição" );
          }
        case 157: break;
        case 32: 
          { return new Tokens("IDENTIFICADOR_METODO", yytext(), yyline, yycolumn, "Identificador de métodos que utilizam ? ou ! no final");
          }
        case 158: break;
        case 97: 
          { return new Tokens("RETURN", yytext(), yyline, yycolumn, "Sai do método com o valor de retorno.");
          }
        case 159: break;
        case 18: 
          { return new Tokens("MAIOR", yytext(), yyline, yycolumn, "Retorna true se o operando da esquerda for maior que o da direita: b>a");
          }
        case 160: break;
        case 8: 
          { return new Tokens("COLCHETEABERTO", yytext(), yyline, yycolumn, "Usado em Arrays: ary = [1, \"two\", 3.0].");
          }
        case 161: break;
        case 13: 
          { return new Tokens("MULTIPLICACAO", yytext(), yyline, yycolumn, "Operador de multiplicação");
          }
        case 162: break;
        case 95: 
          { return new Tokens("GUARD", yytext(), yyline, yycolumn, "Usado para transferir o controle do programa para fora de um escopo se uma ou mais condições não forem atendidas, ao mesmo tempo que desembrulhará quaisquer valores opcionais fornecidos");
          }
        case 163: break;
        case 88: 
          { return new Tokens("SUPER", yytext(), yyline, yycolumn, "Chama o método que substitui o método atual");
          }
        case 164: break;
        case 43: 
          { return new Tokens("MENORIGUAL", yytext(), yyline, yycolumn, "Retorna true se o operando da esquerda for menor ou igual que o da direita: a<=b");
          }
        case 165: break;
        case 49: 
          { return new Tokens("OREQ", yytext(), yyline, yycolumn, "Retorna e atribui true se pelomenos um dos operandos for true: A |= B é equivalente a A = A | B" );
          }
        case 166: break;
        case 99: 
          { return new Tokens("STRUCT", yytext(), yyline, yycolumn, "Uma construção flexível de uso geral que se torna os blocos de construção do código do seu programa e também pode fornecer inicializadores inteligentes de membros");
          }
        case 167: break;
        case 108: 
          { return new Tokens("PRIVATE", yytext(), yyline, yycolumn, "Uma construção de controle de acesso que permite que as entidades tenham como escopo sua declaração de definição");
          }
        case 168: break;
        case 118: 
          { return new Tokens("ASSOCIATEDTYPE", yytext(), yyline, yycolumn, "Dá um nome de espaço reservado para um tipo que é usado como parte de um protocolo");
          }
        case 169: break;
        case 22: 
          { return new Tokens("BITCOMP", yytext(), yyline, yycolumn, "Operador de complemento binário: ~10 retorna -11");
          }
        case 170: break;
        case 80: 
          { return new Tokens("OPEN", yytext(), yyline, yycolumn, "Uma construção de controle de acesso que permite que os objetos sejam acessíveis e subclassíveis fora de seu módulo de definiçãoa");
          }
        case 171: break;
        case 104: 
          { return new Tokens("PUBLIC", yytext(), yyline, yycolumn, "Uma construção de controle de acesso que permite que os objetos sejam acessíveis e subclassíveis, mas apenas dentro de seu módulo de definição.");
          }
        case 172: break;
        case 102: 
          { return new Tokens("DEINIT", yytext(), yyline, yycolumn, "Chamado imediatamente antes de uma instância de classe ser desalocada");
          }
        case 173: break;
        case 86: 
          { return new Tokens("BREAK", yytext(), yyline, yycolumn, "Sai do loop mais interno. O break não sai da expressão case");
          }
        case 174: break;
        case 87: 
          { return new Tokens("CLASS", yytext(), yyline, yycolumn, "Define uma nova classe.");
          }
        case 175: break;
        case 7: 
          { return new Tokens("PONTO", yytext(), yyline, yycolumn, "Usado para trabalhar com objetos: \"arr = Array.new(3)\" ou \"arr.drop(3)\".");
          }
        case 176: break;
        case 90: 
          { return new Tokens("FALSE", yytext(), yyline, yycolumn, "A única instância da classe FalseClass (representa falso)");
          }
        case 177: break;
        case 60: 
          { return new Tokens("NAOIDENTIDADE", yytext(), yyline, yycolumn, "Verifica se duas instâncias de uma classe não apontam para a mesma memoria:(classA == classA) retorna false, (classA == classB) retorna false");
          }
        case 178: break;
        case 56: 
          { string.append("\n");
          }
        case 179: break;
        case 115: 
          { return new Tokens("TYPEALIAS", yytext(), yyline, yycolumn, "Introduz um alias nomeado de um tipo existente em seu programa");
          }
        case 180: break;
        case 6: 
          { return new Tokens("INTERROG", yytext(), yyline, yycolumn, "Aplicado noperador ternário");
          }
        case 181: break;
        case 112: 
          { return new Tokens("INTERNAL", yytext(), yyline, yycolumn, "Uma construção de controle de acesso que permite que entidades sejam usadas em qualquer arquivo de origem de seu módulo de definição");
          }
        case 182: break;
        case 64: 
          { return new Tokens("SHIFTLEQ", yytext(), yyline, yycolumn, "Left Shift com atribuição: A <<= B é equivalente a A = A << B");
          }
        case 183: break;
        case 109: 
          { return new Tokens("RETHROWS", yytext(), yyline, yycolumn, " Indica que a função gera um erro apenas se um de seus parâmetros de função gerar um erro");
          }
        case 184: break;
        case 79: 
          { return new Tokens("SELF", yytext(), yyline, yycolumn, "O receptor do método atual");
          }
        case 185: break;
        case 84: 
          { return new Tokens("CHAR", yytext(), yyline, yycolumn, "Define uma variavel ou retorno de uma função como Tipo Caractere por exemplo a letra a, b ou c");
          }
        case 186: break;
        case 98: 
          { return new Tokens("REPEAT", yytext(), yyline, yycolumn, "Executa uma única passagem pelo bloco do loop primeiro, antes de considerar a condição do loop");
          }
        case 187: break;
        case 48: 
          { return new Tokens("ANDBOOL", yytext(), yyline, yycolumn, "Operador lógico AND: (a==true && b==true) retorna true ");
          }
        case 188: break;
        case 70: 
          { return new Tokens("ANY", yytext(), yyline, yycolumn, "Pode ser usado para representar uma instância de qualquer tipo, incluindo tipos de função");
          }
        case 189: break;
        case 37: 
          { return new Tokens("SUBEQ", yytext(), yyline, yycolumn, "(a -= b) equivalente a (a = a - b)");
          }
        case 190: break;
        case 47: 
          { return new Tokens("BITANDEQ", yytext(), yyline, yycolumn, "Operador AND binário com atribuição, sendo a=10 e b=3, a recebe o valor 2: a &= b, a == 2 ");
          }
        case 191: break;
        case 106: 
          { return new Tokens("STRING", yytext(), yyline, yycolumn, "Define uma variavel ou retorno de uma função como Tipo String nome casa");
          }
        case 192: break;
        case 5: 
          { return new Tokens("NOT", yytext(), yyline, yycolumn, "Inverte o estado da lógica do operando: !true é equivalente a false");
          }
        case 193: break;
        case 33: 
          { return new Tokens("DECIMAL", yytext(), yyline, yycolumn, "Valor de número decimal");
          }
        case 194: break;
        case 54: 
          { string.append("\r");
          }
        case 195: break;
        case 10: 
          { return new Tokens("COLCHETEFECHADO", yytext(), yyline, yycolumn, "Usado em Arrays: ary = [1, \"two\", 3.0].");
          }
        case 196: break;
        case 89: 
          { return new Tokens("DEFER", yytext(), yyline, yycolumn, "Usado para executar o código antes de transferir o controle do programa para fora do escopo em que aparece");
          }
        case 197: break;
        case 44: 
          { return new Tokens("SHIFTL", yytext(), yyline, yycolumn, "Left Shift, faz o deslocamento binário a esquerda, ocorrendo uma multiplicação: 10<<1 == 20");
          }
        case 198: break;
        case 77: 
          { return new Tokens("ENUM", yytext(), yyline, yycolumn, "Define um tipo comum para um grupo de valores relacionados e permite que você trabalhe com esses valores de uma forma de segurança de tipo em seu código");
          }
        case 199: break;
        case 46: 
          { return new Tokens("SHIFTR", yytext(), yyline, yycolumn, "Left Right, faz o deslocamento binário a direita, ocorrendo uam divisão: 10>>1 == 5");
          }
        case 200: break;
        case 12: 
          { return new Tokens("SUBTRACAO", yytext(), yyline, yycolumn, "Operador de subtração");
          }
        case 201: break;
        case 19: 
          { return new Tokens("BITAND", yytext(), yyline, yycolumn, "Operador AND binário: 1010 & 0011 = 0010");
          }
        case 202: break;
        case 21: 
          { return new Tokens("BITXOR", yytext(), yyline, yycolumn, "Operador binário XOR: 1010 ^ 0011 = 1001");
          }
        case 203: break;
        case 55: 
          { string.append("\t");
          }
        case 204: break;
        case 71: 
          { return new Tokens("Int", yytext(), yyline, yycolumn, "Define uma variavel ou retorno de uma função como Tipo Inteiro como 0,1,2,3 ...");
          }
        case 205: break;
        case 35: 
          { return new Tokens("ARRAY", yytext(), yyline, yycolumn, "Array de valores");
          }
        case 206: break;
        case 114: 
          { return new Tokens("EXTENSION", yytext(), yyline, yycolumn, "Permite adicionar uma nova funcionalidade a uma classe, estrutura, enumeração ou tipo de protocolo existente");
          }
        case 207: break;
        case 113: 
          { return new Tokens("PROTOCOL", yytext(), yyline, yycolumn, "Equivalente ao conceito de interface em outras linguagens");
          }
        case 208: break;
        case 101: 
          { return new Tokens("SWITCH", yytext(), yyline, yycolumn, "Considera um valor e o compara com vários padrões de correspondência possíveis");
          }
        case 209: break;
        case 92: 
          { return new Tokens("PRINT", yytext(), yyline, yycolumn, "Função utilizada para imprimir coisas no console da IDE exemplo print(2)");
          }
        case 210: break;
        case 83: 
          { return new Tokens("INIT", yytext(), yyline, yycolumn, "São chamados para criar uma nova instância de um tipo específico");
          }
        case 211: break;
        case 2: 
          { /* ignore */
          }
        case 212: break;
        case 96: 
          { return new Tokens("FLOAT", yytext(), yyline, yycolumn, "Define uma variavel ou retorno de uma função como Tipo decimal como 0.5, 1.325");
          }
        case 213: break;
        case 93: 
          { return new Tokens("WHERE", yytext(), yyline, yycolumn, "Requer que um tipo associado esteja em conformidade com um determinado protocolo ou que determinados parâmetros de tipo e tipos associados sejam os mesmos");
          }
        case 214: break;
        case 67: 
          { return new Tokens("FOR", yytext(), yyline, yycolumn, "Palavra para estrutura de repetição, Executa o corpo para cada elemento no resultado da expressão.");
          }
        case 215: break;
        case 75: 
          { return new Tokens("MATRIX", yytext(), yyline, yycolumn, "Matrix de valores");
          }
        case 216: break;
        case 62: 
          { return new Tokens("INTERVALOSEMIABERTO", yytext(), yyline, yycolumn, "Retorna e atribui true se pelomenos um dos operandos for true: A |= B é equivalente a A = A | B" );
          }
        case 217: break;
        case 42: 
          { return new Tokens("IGUALDADE", yytext(), yyline, yycolumn, "Verifica se dois operandos são iguais: (a == a) retorna true, (a == b) retorna false");
          }
        case 218: break;
        case 15: 
          { return new Tokens("MODULO", yytext(), yyline, yycolumn, "Operador de modulo, retorna o resto de ums divisão");
          }
        case 219: break;
        case 3: 
          { return new Tokens("IDENTIFICADOR", yytext(), yyline, yycolumn, "Identificador de métodos, variáveis, constantes, etc");
          }
        case 220: break;
        case 30: 
          { string.append( yytext() );
          }
        case 221: break;
        case 1: 
          { throw new RuntimeException("Caractere inválido " + yytext() + " na linha " + (yyline+1) + ", coluna " +(yycolumn+1));
          }
        case 222: break;
        case 78: 
          { return new Tokens("CASE", yytext(), yyline, yycolumn, "As case expressões também são para execução condicional. sendo que suas comparações equivale ao mesmo que ===.");
          }
        case 223: break;
        case 34: 
          { return new Tokens("DEIGUALDADE", yytext(), yyline, yycolumn, "Verifica se dois operandos são diferentes: (a == a) retorna false, (a == b) retorna true");
          }
        case 224: break;
        case 25: 
          { return new Tokens("PARENTESEABERTO", yytext(), yyline, yycolumn, "Usado para limitar um conjundo de dados: \"(1 + 2)*5\" ou \"for a in (1..6)\"");
          }
        case 225: break;
        case 65: 
          { return new Tokens("SHIFTREQ", yytext(), yyline, yycolumn, "Right Shift com atribuição: A >>= B é equivalente a A = A >> B");
          }
        case 226: break;
        case 14: 
          { return new Tokens("DIVISAO", yytext(), yyline, yycolumn, "Operador de divisão");
          }
        case 227: break;
        case 40: 
          { return new Tokens("DIVEQ", yytext(), yyline, yycolumn, "(a /= b) equivalente a (a = a / b)");
          }
        case 228: break;
        case 36: 
          { return new Tokens("PLUSEQ", yytext(), yyline, yycolumn, "(a += b) equivalente a (a = a + b)");
          }
        case 229: break;
        case 100: 
          { return new Tokens("STATIC", yytext(), yyline, yycolumn, "Define métodos que são chamados no próprio tipo. Também usado para definir membros estáticos.");
          }
        case 230: break;
        case 41: 
          { return new Tokens("MODEQ", yytext(), yyline, yycolumn, "(a %= b) equivalente a (a = a % b)");
          }
        case 231: break;
        case 16: 
          { return new Tokens("ATRIBUICAO", yytext(), yyline, yycolumn, "Atribuição de valores");
          }
        case 232: break;
        case 59: 
          { return new Tokens("NOTACAO_CIENTIFICA", yytext(), yyline, yycolumn, "Escrita de notação científica");
          }
        case 233: break;
        case 38: 
          { return new Tokens("RETORNOFUNCAO", yytext(), yyline, yycolumn, "Precede o tipo de retorno de uma função func a () -> String" );
          }
        case 234: break;
        case 53: 
          { return new Tokens("IN", yytext(), yyline, yycolumn, "Define um contado para uma estrutura de Repetição For");
          }
        case 235: break;
        case 61: 
          { return new Tokens("INTERVALOFECHADO", yytext(), yyline, yycolumn, "Retorna e atribui true se pelomenos um dos operandos for true: A |= B é equivalente a A = A | B" );
          }
        case 236: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
