/* The following code was generated by JFlex 1.4.3 on 23/02/21 22:02 */

package codigo;
import static codigo.Tokens.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 23/02/21 22:02 from the specification file
 * <tt>src/codigo/Lexer.flex</tt>
 */
public class Analisador {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int CHAR = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\23\1\10\1\101"+
    "\1\50\1\0\1\31\1\35\1\6\1\42\1\43\1\27\1\25\1\14"+
    "\1\26\1\12\1\30\12\5\1\45\1\44\1\33\1\32\1\34\1\11"+
    "\1\0\1\71\1\77\1\76\1\74\1\100\1\73\2\4\1\72\11\4"+
    "\1\75\7\4\1\13\1\102\1\15\1\37\1\7\1\0\1\21\1\53"+
    "\1\56\1\64\1\17\1\47\1\70\1\57\1\46\1\4\1\63\1\52"+
    "\1\66\1\62\1\60\1\20\1\4\1\16\1\54\1\22\1\61\1\51"+
    "\1\55\1\67\1\65\1\4\1\24\1\36\1\41\1\40\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\5\3\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\23\3"+
    "\1\35\1\36\1\37\1\1\1\40\4\0\1\41\1\42"+
    "\5\0\1\43\11\3\1\44\1\45\1\46\1\47\1\0"+
    "\1\2\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\23\3\1\65"+
    "\10\3\1\66\1\67\1\70\1\71\1\72\1\4\1\73"+
    "\2\0\1\74\1\75\1\76\1\77\7\0\13\3\1\0"+
    "\1\100\1\101\1\102\1\0\6\3\1\103\1\3\1\104"+
    "\1\105\15\3\1\106\3\3\1\107\1\110\5\3\1\111"+
    "\1\112\1\113\1\0\1\73\2\0\1\114\5\0\3\3"+
    "\1\115\1\116\6\3\1\117\1\3\1\2\1\0\1\3"+
    "\1\120\5\3\1\121\1\3\1\122\7\3\1\123\3\3"+
    "\1\124\7\3\1\125\1\126\1\73\7\0\3\3\1\0"+
    "\2\3\1\127\4\3\1\0\1\3\1\130\2\3\1\131"+
    "\1\3\1\132\3\3\1\133\1\134\1\135\1\136\1\137"+
    "\2\3\1\0\1\3\1\140\1\3\1\141\1\142\2\3"+
    "\3\0\1\143\1\3\1\144\1\0\3\3\1\145\2\3"+
    "\1\0\1\3\1\146\2\3\1\147\1\150\1\151\2\3"+
    "\1\0\1\152\1\3\1\153\1\154\3\0\1\155\1\3"+
    "\1\156\1\3\1\157\1\3\1\0\2\3\1\0\3\3"+
    "\1\0\2\3\1\0\1\160\1\0\1\161\1\3\1\0"+
    "\1\162\1\0\2\3\1\0\1\163\2\3\1\0\1\164"+
    "\1\165\1\0\1\166\2\0\1\3\1\167\2\0\2\3"+
    "\1\0\1\170\2\0\1\3\2\0\2\3\2\0\1\171"+
    "\1\3\2\0\1\172\1\173\1\174\1\175\1\3\3\0"+
    "\1\3\1\176\1\177\1\0\1\200\2\0\1\201";

  private static int [] zzUnpackAction() {
    int [] result = new int[409];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\311\0\u014f\0\u0192"+
    "\0\u01d5\0\u0218\0\311\0\u025b\0\u029e\0\311\0\311\0\u02e1"+
    "\0\u0324\0\u0367\0\u03aa\0\u03ed\0\311\0\u0430\0\u0473\0\u04b6"+
    "\0\u04f9\0\u053c\0\u057f\0\u05c2\0\u0605\0\u0648\0\u068b\0\311"+
    "\0\311\0\311\0\311\0\311\0\311\0\311\0\u06ce\0\u0711"+
    "\0\u0754\0\u0797\0\u07da\0\u081d\0\u0860\0\u08a3\0\u08e6\0\u0929"+
    "\0\u096c\0\u09af\0\u09f2\0\u0a35\0\u0a78\0\u0abb\0\u0afe\0\u0b41"+
    "\0\u0b84\0\311\0\u0bc7\0\311\0\u0c0a\0\311\0\u0c4d\0\u0c90"+
    "\0\u0cd3\0\u0d16\0\u0d59\0\u0d9c\0\u0ddf\0\u0e22\0\u0e65\0\u0ea8"+
    "\0\u0eeb\0\u0f2e\0\u0f71\0\u0fb4\0\u0ff7\0\u103a\0\u107d\0\u10c0"+
    "\0\u1103\0\u1146\0\u1189\0\311\0\311\0\311\0\311\0\u11cc"+
    "\0\u120f\0\311\0\311\0\u1252\0\311\0\u1295\0\311\0\u12d8"+
    "\0\311\0\311\0\311\0\311\0\u131b\0\u135e\0\u13a1\0\u13e4"+
    "\0\u1427\0\u146a\0\u14ad\0\u14f0\0\u1533\0\u1576\0\u15b9\0\u15fc"+
    "\0\u163f\0\u1682\0\u16c5\0\u1708\0\u174b\0\u178e\0\u17d1\0\u1814"+
    "\0\u1857\0\u014f\0\u189a\0\u18dd\0\u1920\0\u1963\0\u19a6\0\u19e9"+
    "\0\u1a2c\0\u1a6f\0\311\0\311\0\311\0\311\0\u1ab2\0\u1af5"+
    "\0\u1b38\0\u1b7b\0\u1bbe\0\311\0\311\0\311\0\311\0\u1c01"+
    "\0\u1c44\0\u1c87\0\u1cca\0\u1d0d\0\u1d50\0\u1d93\0\u1dd6\0\u1e19"+
    "\0\u1e5c\0\u1e9f\0\u1ee2\0\u1f25\0\u1f68\0\u1fab\0\u1fee\0\u2031"+
    "\0\u2074\0\u20b7\0\311\0\311\0\311\0\u20fa\0\u213d\0\u2180"+
    "\0\u21c3\0\u2206\0\u2249\0\u228c\0\u014f\0\u22cf\0\u014f\0\u014f"+
    "\0\u2312\0\u2355\0\u2398\0\u23db\0\u241e\0\u2461\0\u24a4\0\u24e7"+
    "\0\u252a\0\u256d\0\u25b0\0\u25f3\0\u2636\0\u014f\0\u2679\0\u26bc"+
    "\0\u26ff\0\u014f\0\u014f\0\u2742\0\u2785\0\u27c8\0\u280b\0\u284e"+
    "\0\311\0\311\0\311\0\u2891\0\u1b7b\0\u28d4\0\u2917\0\311"+
    "\0\u295a\0\u299d\0\u29e0\0\u0f2e\0\u2a23\0\u2a66\0\u2aa9\0\u2aec"+
    "\0\u2b2f\0\u014f\0\u2b72\0\u2bb5\0\u2bf8\0\u2c3b\0\u2c7e\0\u2cc1"+
    "\0\u014f\0\u2d04\0\u11cc\0\u2d47\0\u2d8a\0\u014f\0\u2dcd\0\u2e10"+
    "\0\u2e53\0\u2e96\0\u2ed9\0\u014f\0\u2f1c\0\u014f\0\u2f5f\0\u2fa2"+
    "\0\u2fe5\0\u3028\0\u306b\0\u30ae\0\u30f1\0\u014f\0\u3134\0\u3177"+
    "\0\u31ba\0\u31fd\0\u3240\0\u3283\0\u32c6\0\u3309\0\u334c\0\u338f"+
    "\0\u33d2\0\u014f\0\u014f\0\u3415\0\u3458\0\u349b\0\u34de\0\u3521"+
    "\0\u3564\0\u35a7\0\u35ea\0\u362d\0\u3670\0\u36b3\0\u36f6\0\u3739"+
    "\0\u377c\0\u014f\0\u37bf\0\u3802\0\u3845\0\u3888\0\u38cb\0\u390e"+
    "\0\u014f\0\u3951\0\u3994\0\u014f\0\u39d7\0\u014f\0\u3a1a\0\u3a5d"+
    "\0\u3aa0\0\u014f\0\u014f\0\u014f\0\u014f\0\u014f\0\u3ae3\0\u3b26"+
    "\0\u3b69\0\u3bac\0\u014f\0\u3bef\0\u014f\0\u014f\0\u3c32\0\u3c75"+
    "\0\u3cb8\0\u3cfb\0\u3d3e\0\u3d81\0\u3dc4\0\u014f\0\u3e07\0\u3e4a"+
    "\0\u3e8d\0\u3ed0\0\u3f13\0\u3f56\0\u3f99\0\u3fdc\0\u401f\0\u014f"+
    "\0\u4062\0\u40a5\0\u014f\0\u40e8\0\u014f\0\u412b\0\u416e\0\u41b1"+
    "\0\u014f\0\u41f4\0\u014f\0\u014f\0\u4237\0\u427a\0\u42bd\0\311"+
    "\0\u4300\0\311\0\u4343\0\u4386\0\u43c9\0\u440c\0\u444f\0\u4492"+
    "\0\u44d5\0\u4518\0\u455b\0\u459e\0\u45e1\0\u4624\0\u4667\0\u46aa"+
    "\0\u014f\0\u46ed\0\u014f\0\u4730\0\u4773\0\u014f\0\u47b6\0\u47f9"+
    "\0\u483c\0\u487f\0\u48c2\0\u4905\0\u4948\0\u498b\0\u014f\0\u014f"+
    "\0\u49ce\0\u014f\0\u4a11\0\u4a54\0\u4a97\0\u014f\0\u4ada\0\u4b1d"+
    "\0\u4b60\0\u4ba3\0\u4be6\0\311\0\u4c29\0\u4c6c\0\u4caf\0\u4cf2"+
    "\0\u4d35\0\u4d78\0\u4dbb\0\u4dfe\0\u4e41\0\311\0\u4e84\0\u4ec7"+
    "\0\u4f0a\0\u014f\0\u4f4d\0\311\0\311\0\u4f90\0\u4fd3\0\u5016"+
    "\0\u5059\0\u509c\0\311\0\311\0\u50df\0\u014f\0\u5122\0\u5165"+
    "\0\311";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[409];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\10\1\11\1\7\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\6\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\4"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\7\1\57"+
    "\1\7\1\60\1\7\1\61\3\7\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\7\1\72\1\4"+
    "\1\73\2\4\76\73\1\74\1\75\103\4\105\0\1\6"+
    "\104\0\2\7\1\0\1\7\2\76\4\0\5\7\23\0"+
    "\2\7\1\0\30\7\7\0\1\10\1\0\1\77\2\0"+
    "\1\100\4\0\1\101\60\0\1\101\6\0\1\102\11\0"+
    "\5\102\23\0\2\102\1\0\30\102\34\0\1\103\55\0"+
    "\1\104\4\0\1\105\74\0\1\106\1\107\1\0\1\110"+
    "\3\0\1\111\1\0\1\112\5\106\23\0\2\106\1\0"+
    "\30\106\6\0\2\7\1\0\1\7\2\76\4\0\1\7"+
    "\1\113\3\7\23\0\2\7\1\0\30\7\6\0\2\7"+
    "\1\0\1\7\2\76\4\0\5\7\23\0\2\7\1\0"+
    "\1\7\1\114\7\7\1\115\4\7\1\116\11\7\6\0"+
    "\2\7\1\0\1\7\2\76\4\0\1\117\4\7\23\0"+
    "\2\7\1\0\10\7\1\120\17\7\6\0\2\7\1\0"+
    "\1\7\2\76\4\0\5\7\23\0\2\7\1\0\3\7"+
    "\1\121\24\7\6\0\2\7\1\0\1\7\2\76\4\0"+
    "\1\122\4\7\23\0\2\7\1\0\14\7\1\123\13\7"+
    "\34\0\1\124\102\0\1\125\1\0\1\126\100\0\1\127"+
    "\77\0\1\130\1\131\1\0\1\132\102\0\1\133\102\0"+
    "\1\134\102\0\1\135\1\136\101\0\1\137\1\0\1\140"+
    "\100\0\1\141\2\0\1\142\77\0\1\143\3\0\1\144"+
    "\50\0\2\7\1\0\1\7\2\76\4\0\5\7\23\0"+
    "\1\7\1\145\1\0\11\7\1\146\3\7\1\147\12\7"+
    "\6\0\2\7\1\0\1\7\2\76\4\0\3\7\1\150"+
    "\1\7\23\0\1\151\1\7\1\0\7\7\1\152\1\153"+
    "\17\7\6\0\2\7\1\0\1\7\2\76\4\0\3\7"+
    "\1\154\1\7\23\0\2\7\1\0\30\7\6\0\2\7"+
    "\1\0\1\7\2\76\4\0\1\7\1\155\3\7\23\0"+
    "\2\7\1\0\30\7\6\0\2\7\1\0\1\7\2\76"+
    "\4\0\1\156\4\7\23\0\2\7\1\0\30\7\6\0"+
    "\2\7\1\0\1\7\2\76\4\0\1\7\1\157\2\7"+
    "\1\160\23\0\2\7\1\0\4\7\1\161\3\7\1\162"+
    "\17\7\6\0\2\7\1\0\1\7\2\76\4\0\5\7"+
    "\23\0\2\7\1\0\6\7\1\163\21\7\6\0\2\7"+
    "\1\0\1\7\2\76\4\0\3\7\1\164\1\7\23\0"+
    "\2\7\1\0\1\7\1\165\5\7\1\166\20\7\6\0"+
    "\2\7\1\0\1\7\2\76\4\0\2\7\1\167\2\7"+
    "\23\0\2\7\1\0\30\7\6\0\2\7\1\0\1\7"+
    "\2\76\4\0\5\7\23\0\1\170\1\7\1\0\30\7"+
    "\6\0\2\7\1\0\1\7\2\76\4\0\1\7\1\171"+
    "\3\7\23\0\2\7\1\0\7\7\1\172\20\7\6\0"+
    "\2\7\1\0\1\7\2\76\4\0\5\7\23\0\2\7"+
    "\1\0\10\7\1\173\17\7\6\0\2\7\1\0\1\7"+
    "\2\76\4\0\5\7\23\0\2\7\1\0\11\7\1\174"+
    "\16\7\6\0\2\7\1\0\1\7\2\76\4\0\5\7"+
    "\23\0\2\7\1\0\11\7\1\175\16\7\6\0\2\7"+
    "\1\0\1\7\2\76\4\0\5\7\23\0\2\7\1\0"+
    "\1\7\1\176\26\7\6\0\2\7\1\0\1\7\2\76"+
    "\4\0\5\7\23\0\2\7\1\0\7\7\1\177\20\7"+
    "\6\0\2\7\1\0\1\7\2\76\4\0\4\7\1\200"+
    "\23\0\2\7\1\0\30\7\6\0\2\7\1\0\1\7"+
    "\2\76\4\0\5\7\23\0\2\7\1\0\6\7\1\201"+
    "\21\7\6\0\2\7\1\0\1\7\2\76\4\0\5\7"+
    "\23\0\2\7\1\0\7\7\1\202\20\7\2\0\1\73"+
    "\2\0\76\73\20\0\1\203\3\0\1\204\37\0\1\205"+
    "\16\0\1\206\1\207\5\0\1\210\102\0\1\104\102\0"+
    "\1\211\4\0\1\212\12\0\2\213\62\0\1\214\126\0"+
    "\1\215\55\0\1\104\11\0\1\101\60\0\1\101\14\0"+
    "\1\216\20\0\1\217\53\0\2\106\1\0\1\110\4\0"+
    "\1\220\1\112\5\106\23\0\2\106\1\0\30\106\6\0"+
    "\2\107\6\0\1\220\1\0\5\107\23\0\2\107\1\0"+
    "\30\107\6\0\2\110\1\0\1\110\5\0\1\112\5\110"+
    "\23\0\2\110\1\0\30\110\6\0\1\221\1\222\1\0"+
    "\1\223\5\0\1\224\5\221\23\0\2\221\1\0\30\221"+
    "\15\0\1\225\1\226\72\0\2\7\1\0\1\7\2\76"+
    "\4\0\2\7\1\227\1\7\1\230\23\0\2\7\1\0"+
    "\30\7\6\0\2\7\1\0\1\7\2\76\4\0\5\7"+
    "\23\0\2\7\1\0\3\7\1\231\24\7\6\0\2\7"+
    "\1\0\1\7\2\76\4\0\5\7\23\0\2\7\1\0"+
    "\10\7\1\232\17\7\6\0\2\7\1\0\1\7\2\76"+
    "\4\0\4\7\1\233\23\0\2\7\1\0\30\7\6\0"+
    "\2\7\1\0\1\7\2\76\4\0\5\7\23\0\1\234"+
    "\1\7\1\0\7\7\1\235\20\7\6\0\2\7\1\0"+
    "\1\7\2\76\4\0\5\7\23\0\2\7\1\0\2\7"+
    "\1\236\25\7\6\0\2\7\1\0\1\7\2\76\4\0"+
    "\5\7\23\0\2\7\1\0\3\7\1\237\24\7\6\0"+
    "\2\7\1\0\1\7\2\76\4\0\5\7\23\0\2\7"+
    "\1\0\10\7\1\240\17\7\6\0\2\7\1\0\1\7"+
    "\2\76\4\0\2\7\1\241\2\7\23\0\2\7\1\0"+
    "\30\7\2\0\27\130\1\242\53\130\2\131\1\0\100\131"+
    "\32\0\1\243\102\0\1\244\102\0\1\245\54\0\2\7"+
    "\1\0\1\7\2\76\4\0\5\7\1\246\22\0\2\7"+
    "\1\0\30\7\6\0\2\7\1\0\1\7\2\76\4\0"+
    "\4\7\1\247\23\0\1\250\1\7\1\0\7\7\1\251"+
    "\20\7\6\0\2\7\1\0\1\7\2\76\4\0\2\7"+
    "\1\252\2\7\23\0\2\7\1\0\30\7\6\0\2\7"+
    "\1\0\1\7\2\76\4\0\5\7\23\0\2\7\1\0"+
    "\1\7\1\253\26\7\6\0\2\7\1\0\1\7\2\76"+
    "\4\0\5\7\23\0\2\7\1\0\1\7\1\254\26\7"+
    "\6\0\2\7\1\0\1\7\2\76\4\0\1\255\4\7"+
    "\23\0\2\7\1\0\30\7\6\0\2\7\1\0\1\7"+
    "\2\76\4\0\5\7\23\0\2\7\1\0\11\7\1\256"+
    "\16\7\6\0\2\7\1\0\1\7\2\76\4\0\1\257"+
    "\4\7\23\0\2\7\1\0\30\7\6\0\2\7\1\0"+
    "\1\7\2\76\4\0\4\7\1\260\23\0\2\7\1\0"+
    "\30\7\6\0\2\7\1\0\1\7\2\76\4\0\1\7"+
    "\1\261\3\7\23\0\2\7\1\0\30\7\6\0\2\7"+
    "\1\0\1\7\2\76\4\0\5\7\23\0\2\7\1\0"+
    "\1\7\1\262\26\7\6\0\2\7\1\0\1\7\2\76"+
    "\4\0\1\263\2\7\1\264\1\7\23\0\2\7\1\0"+
    "\30\7\6\0\2\7\1\0\1\7\2\76\4\0\5\7"+
    "\23\0\1\265\1\7\1\0\30\7\6\0\2\7\1\0"+
    "\1\7\2\76\4\0\2\7\1\266\2\7\23\0\2\7"+
    "\1\0\30\7\6\0\2\7\1\0\1\7\2\76\4\0"+
    "\1\7\1\267\3\7\23\0\1\270\1\7\1\0\30\7"+
    "\6\0\2\7\1\0\1\7\2\76\4\0\4\7\1\271"+
    "\23\0\2\7\1\0\3\7\1\272\24\7\6\0\2\7"+
    "\1\0\1\7\2\76\4\0\3\7\1\273\1\7\23\0"+
    "\2\7\1\0\30\7\6\0\2\7\1\0\1\7\2\76"+
    "\4\0\5\7\23\0\2\7\1\0\11\7\1\274\16\7"+
    "\6\0\2\7\1\0\1\7\2\76\4\0\1\7\1\275"+
    "\3\7\23\0\2\7\1\0\30\7\6\0\2\7\1\0"+
    "\1\7\2\76\4\0\5\7\23\0\2\7\1\0\1\7"+
    "\1\276\26\7\6\0\2\7\1\0\1\7\2\76\4\0"+
    "\5\7\23\0\1\277\1\300\1\0\30\7\6\0\2\7"+
    "\1\0\1\7\2\76\4\0\3\7\1\301\1\7\23\0"+
    "\2\7\1\0\30\7\6\0\2\7\1\0\1\7\2\76"+
    "\4\0\5\7\23\0\2\7\1\0\14\7\1\302\13\7"+
    "\6\0\2\7\1\0\1\7\2\76\4\0\4\7\1\303"+
    "\23\0\2\7\1\0\30\7\6\0\2\7\1\0\1\7"+
    "\2\76\4\0\5\7\23\0\2\7\1\0\7\7\1\304"+
    "\20\7\6\0\2\7\1\0\1\7\2\76\4\0\5\7"+
    "\23\0\2\7\1\0\10\7\1\305\17\7\6\0\2\7"+
    "\1\0\1\7\2\76\4\0\1\306\4\7\23\0\2\7"+
    "\1\0\30\7\6\0\2\7\1\0\1\7\2\76\4\0"+
    "\3\7\1\307\1\7\23\0\2\7\1\0\30\7\6\0"+
    "\2\7\1\0\1\7\2\76\4\0\5\7\23\0\2\7"+
    "\1\0\7\7\1\310\20\7\20\0\1\311\3\0\1\312"+
    "\37\0\1\313\25\0\1\210\1\0\1\77\7\0\1\101"+
    "\60\0\1\101\7\0\1\211\1\0\1\314\2\0\1\212"+
    "\75\0\1\315\102\0\1\211\4\0\1\212\74\0\2\316"+
    "\10\0\5\316\23\0\2\316\1\0\30\316\6\0\2\221"+
    "\1\0\1\223\4\0\1\317\1\224\5\221\23\0\2\221"+
    "\1\0\30\221\6\0\2\222\6\0\1\317\1\0\5\222"+
    "\23\0\2\222\1\0\30\222\6\0\2\223\1\0\1\223"+
    "\5\0\1\224\5\223\23\0\2\223\1\0\30\223\15\0"+
    "\1\111\1\226\1\320\71\0\1\321\1\322\1\0\1\323"+
    "\5\0\1\324\5\321\23\0\2\321\1\0\30\321\15\0"+
    "\1\325\73\0\2\7\1\0\1\7\2\76\4\0\1\7"+
    "\1\326\3\7\23\0\2\7\1\0\30\7\6\0\2\7"+
    "\1\0\1\7\2\76\4\0\5\7\23\0\2\7\1\0"+
    "\6\7\1\327\1\7\1\330\17\7\6\0\2\7\1\0"+
    "\1\7\2\76\4\0\1\7\1\331\3\7\23\0\2\7"+
    "\1\0\30\7\6\0\2\7\1\0\1\7\2\76\4\0"+
    "\5\7\23\0\2\7\1\0\15\7\1\332\12\7\6\0"+
    "\2\7\1\0\1\7\2\76\4\0\1\7\1\333\3\7"+
    "\23\0\2\7\1\0\30\7\6\0\2\7\1\0\1\7"+
    "\2\76\4\0\5\7\23\0\2\7\1\0\1\334\10\7"+
    "\1\335\16\7\6\0\2\7\1\0\1\7\2\76\4\0"+
    "\4\7\1\336\23\0\2\7\1\0\30\7\6\0\2\7"+
    "\1\0\1\7\2\76\4\0\5\7\23\0\2\7\1\0"+
    "\1\7\1\337\26\7\6\0\2\7\1\0\1\7\2\76"+
    "\4\0\5\7\23\0\2\7\1\0\7\7\1\340\20\7"+
    "\6\0\2\7\1\0\1\7\2\76\4\0\1\7\1\341"+
    "\3\7\23\0\2\7\1\0\30\7\6\0\2\7\1\0"+
    "\1\7\2\76\4\0\1\7\1\342\3\7\23\0\2\7"+
    "\1\0\30\7\2\0\27\130\1\242\1\343\52\130\50\0"+
    "\1\344\36\0\2\7\1\0\1\7\2\76\4\0\1\7"+
    "\1\345\3\7\23\0\2\7\1\0\30\7\6\0\2\7"+
    "\1\0\1\7\2\76\4\0\4\7\1\346\23\0\2\7"+
    "\1\0\30\7\6\0\2\7\1\0\1\7\2\76\4\0"+
    "\5\7\23\0\2\7\1\0\10\7\1\347\17\7\6\0"+
    "\2\7\1\0\1\7\2\76\4\0\5\7\23\0\2\7"+
    "\1\0\7\7\1\350\20\7\6\0\2\7\1\0\1\7"+
    "\2\76\4\0\5\7\23\0\2\7\1\0\1\7\1\351"+
    "\1\7\1\352\24\7\6\0\2\7\1\0\1\7\2\76"+
    "\4\0\1\7\1\353\3\7\23\0\2\7\1\0\30\7"+
    "\6\0\2\7\1\0\1\7\2\76\4\0\5\7\23\0"+
    "\2\7\1\0\5\7\1\354\22\7\6\0\2\7\1\0"+
    "\1\7\2\76\4\0\3\7\1\355\1\7\23\0\2\7"+
    "\1\0\30\7\6\0\2\7\1\0\1\7\2\76\4\0"+
    "\5\7\23\0\1\7\1\356\1\0\30\7\6\0\2\7"+
    "\1\0\1\7\2\76\4\0\5\7\23\0\2\7\1\0"+
    "\10\7\1\357\17\7\6\0\2\7\1\0\1\7\2\76"+
    "\4\0\4\7\1\360\23\0\2\7\1\0\30\7\6\0"+
    "\2\7\1\0\1\7\2\76\4\0\4\7\1\361\23\0"+
    "\2\7\1\0\30\7\6\0\2\7\1\0\1\7\2\76"+
    "\4\0\1\7\1\362\3\7\23\0\2\7\1\0\30\7"+
    "\6\0\2\7\1\0\1\7\2\76\4\0\1\363\4\7"+
    "\23\0\2\7\1\0\30\7\6\0\2\7\1\0\1\7"+
    "\2\76\4\0\5\7\23\0\2\7\1\0\1\7\1\364"+
    "\26\7\6\0\2\7\1\0\1\7\2\76\4\0\5\7"+
    "\23\0\2\7\1\0\5\7\1\365\22\7\6\0\2\7"+
    "\1\0\1\7\2\76\4\0\1\7\1\366\3\7\23\0"+
    "\2\7\1\0\30\7\6\0\2\7\1\0\1\7\2\76"+
    "\4\0\5\7\23\0\2\7\1\0\3\7\1\367\24\7"+
    "\6\0\2\7\1\0\1\7\2\76\4\0\4\7\1\370"+
    "\23\0\2\7\1\0\30\7\6\0\2\7\1\0\1\7"+
    "\2\76\4\0\1\371\4\7\23\0\2\7\1\0\11\7"+
    "\1\372\16\7\6\0\2\7\1\0\1\7\2\76\4\0"+
    "\5\7\23\0\2\7\1\0\11\7\1\373\16\7\6\0"+
    "\2\7\1\0\1\7\2\76\4\0\1\7\1\374\1\7"+
    "\1\375\1\7\23\0\2\7\1\0\30\7\6\0\2\7"+
    "\1\0\1\7\2\76\4\0\1\376\4\7\23\0\2\7"+
    "\1\0\30\7\6\0\2\7\1\0\1\7\2\76\4\0"+
    "\3\7\1\377\1\7\23\0\2\7\1\0\30\7\6\0"+
    "\2\7\1\0\1\7\2\76\4\0\5\7\23\0\2\7"+
    "\1\0\2\7\1\u0100\25\7\6\0\2\7\1\0\1\7"+
    "\2\76\4\0\5\7\23\0\1\u0101\1\7\1\0\30\7"+
    "\6\0\2\7\1\0\1\7\2\76\4\0\1\u0102\4\7"+
    "\23\0\2\7\1\0\30\7\6\0\2\7\1\0\1\7"+
    "\2\76\4\0\5\7\23\0\2\7\1\0\1\7\1\u0103"+
    "\26\7\7\0\1\u0104\101\0\2\u0105\7\0\1\112\5\u0105"+
    "\23\0\2\u0105\1\0\30\u0105\6\0\2\u0106\10\0\5\u0106"+
    "\23\0\2\u0106\1\0\30\u0106\6\0\2\321\1\0\1\323"+
    "\4\0\1\u0107\1\324\5\321\23\0\2\321\1\0\30\321"+
    "\6\0\2\322\6\0\1\u0107\1\0\5\322\23\0\2\322"+
    "\1\0\30\322\6\0\2\323\1\0\1\323\5\0\1\324"+
    "\5\323\23\0\2\323\1\0\30\323\6\0\1\u0108\1\u0109"+
    "\1\0\1\u010a\5\0\1\u010b\5\u0108\23\0\2\u0108\1\0"+
    "\30\u0108\6\0\2\7\1\0\1\7\2\76\4\0\3\7"+
    "\1\u010c\1\7\23\0\2\7\1\0\30\7\6\0\2\7"+
    "\1\0\1\7\2\76\4\0\1\u010d\4\7\23\0\2\7"+
    "\1\0\30\7\6\0\2\7\1\0\1\7\2\76\4\0"+
    "\1\u010e\4\7\23\0\2\7\1\0\30\7\6\0\2\7"+
    "\1\0\1\7\2\76\4\0\5\7\1\u010f\22\0\2\7"+
    "\1\0\30\7\6\0\2\7\1\0\1\7\2\76\4\0"+
    "\5\7\23\0\2\7\1\0\11\7\1\u0110\16\7\6\0"+
    "\2\7\1\0\1\7\2\76\4\0\3\7\1\u0111\1\7"+
    "\23\0\2\7\1\0\30\7\6\0\2\7\1\0\1\7"+
    "\2\76\4\0\4\7\1\u0112\23\0\2\7\1\0\30\7"+
    "\6\0\2\7\1\0\1\7\2\76\4\0\5\7\23\0"+
    "\2\7\1\0\7\7\1\u0113\20\7\6\0\2\7\1\0"+
    "\1\7\2\76\4\0\5\7\23\0\1\u0114\1\7\1\0"+
    "\30\7\6\0\2\7\1\0\1\7\2\76\4\0\5\7"+
    "\23\0\2\7\1\0\5\7\1\u0115\22\7\6\0\2\7"+
    "\1\0\1\7\2\76\4\0\3\7\1\u0116\1\7\23\0"+
    "\2\7\1\0\30\7\23\0\1\u0117\65\0\2\7\1\0"+
    "\1\7\2\76\4\0\1\u0118\4\7\23\0\2\7\1\0"+
    "\30\7\6\0\2\7\1\0\1\7\2\76\4\0\4\7"+
    "\1\u0119\23\0\2\7\1\0\30\7\6\0\2\7\1\0"+
    "\1\7\2\76\4\0\1\u011a\4\7\23\0\2\7\1\0"+
    "\30\7\6\0\2\7\1\0\1\7\2\76\4\0\4\7"+
    "\1\u011b\23\0\2\7\1\0\30\7\6\0\2\7\1\0"+
    "\1\7\2\76\4\0\1\7\1\u011c\3\7\23\0\2\7"+
    "\1\0\30\7\6\0\2\7\1\0\1\7\2\76\4\0"+
    "\2\7\1\u011d\2\7\23\0\2\7\1\0\30\7\6\0"+
    "\2\7\1\0\1\7\2\76\4\0\5\7\23\0\2\7"+
    "\1\0\12\7\1\u011e\15\7\6\0\2\7\1\0\1\7"+
    "\2\76\4\0\5\7\23\0\2\7\1\0\5\7\1\u011f"+
    "\22\7\6\0\2\7\1\0\1\7\2\76\4\0\5\7"+
    "\23\0\1\u0120\1\7\1\0\30\7\6\0\2\7\1\0"+
    "\1\7\2\76\4\0\5\7\23\0\2\7\1\0\5\7"+
    "\1\u0121\22\7\6\0\2\7\1\0\1\7\2\76\4\0"+
    "\1\u0122\4\7\23\0\2\7\1\0\30\7\6\0\2\7"+
    "\1\0\1\7\2\76\4\0\1\7\1\u0123\3\7\23\0"+
    "\2\7\1\0\30\7\6\0\2\7\1\0\1\7\2\76"+
    "\4\0\1\7\1\u0124\3\7\23\0\2\7\1\0\30\7"+
    "\6\0\2\7\1\0\1\7\2\76\4\0\5\7\23\0"+
    "\2\7\1\0\6\7\1\u0125\21\7\6\0\2\7\1\0"+
    "\1\7\2\76\4\0\5\7\23\0\2\7\1\0\3\7"+
    "\1\u0126\24\7\6\0\2\7\1\0\1\7\2\76\4\0"+
    "\5\7\23\0\1\u0127\1\7\1\0\30\7\6\0\2\7"+
    "\1\0\1\7\2\76\4\0\3\7\1\u0128\1\7\23\0"+
    "\2\7\1\0\30\7\6\0\2\7\1\0\1\7\2\76"+
    "\4\0\5\7\1\u0129\22\0\2\7\1\0\30\7\6\0"+
    "\2\7\1\0\1\7\2\76\4\0\5\7\23\0\1\u012a"+
    "\1\7\1\0\30\7\6\0\2\7\1\0\1\7\2\76"+
    "\4\0\1\u012b\4\7\23\0\2\7\1\0\30\7\6\0"+
    "\2\7\1\0\1\7\2\76\4\0\5\7\23\0\2\7"+
    "\1\0\10\7\1\u012c\17\7\6\0\2\7\1\0\1\7"+
    "\2\76\4\0\5\7\23\0\2\7\1\0\13\7\1\u012d"+
    "\14\7\6\0\2\7\1\0\1\7\2\76\4\0\4\7"+
    "\1\u012e\23\0\2\7\1\0\30\7\6\0\2\7\1\0"+
    "\1\7\2\76\4\0\5\7\23\0\2\7\1\0\1\7"+
    "\1\u012f\26\7\6\0\2\7\1\0\1\7\2\76\4\0"+
    "\5\7\23\0\2\7\1\0\11\7\1\u0130\16\7\7\0"+
    "\1\u0104\1\0\1\314\77\0\2\u0105\6\0\1\220\1\112"+
    "\5\u0105\23\0\2\u0105\1\0\30\u0105\6\0\2\u0131\7\0"+
    "\1\224\5\u0131\23\0\2\u0131\1\0\30\u0131\6\0\2\u0132"+
    "\10\0\5\u0132\23\0\2\u0132\1\0\30\u0132\6\0\2\u0108"+
    "\1\0\1\u010a\4\0\1\u0133\1\u010b\5\u0108\23\0\2\u0108"+
    "\1\0\30\u0108\6\0\2\u0109\6\0\1\u0133\1\0\5\u0109"+
    "\23\0\2\u0109\1\0\30\u0109\6\0\2\u010a\1\0\1\u010a"+
    "\5\0\1\u010b\5\u010a\23\0\2\u010a\1\0\30\u010a\15\0"+
    "\1\325\1\0\1\320\71\0\2\7\1\0\1\7\2\76"+
    "\4\0\4\7\1\u0134\23\0\2\7\1\0\30\7\6\0"+
    "\2\7\1\0\1\7\2\76\4\0\5\7\23\0\2\7"+
    "\1\0\7\7\1\u0135\20\7\6\0\2\7\1\0\1\7"+
    "\2\76\4\0\5\7\23\0\2\7\1\0\11\7\1\u0136"+
    "\16\7\50\0\1\u0137\40\0\2\7\1\0\1\7\2\76"+
    "\4\0\5\7\23\0\2\7\1\0\3\7\1\u0138\24\7"+
    "\6\0\2\7\1\0\1\7\2\76\4\0\4\7\1\u0139"+
    "\23\0\2\7\1\0\30\7\6\0\2\7\1\0\1\7"+
    "\2\76\4\0\5\7\23\0\2\7\1\0\5\7\1\u013a"+
    "\22\7\6\0\2\7\1\0\1\7\2\76\4\0\5\7"+
    "\23\0\2\7\1\0\5\7\1\u013b\22\7\6\0\2\7"+
    "\1\0\1\7\2\76\4\0\5\7\23\0\1\u013c\1\7"+
    "\1\0\30\7\6\0\2\7\1\0\1\7\2\76\4\0"+
    "\5\7\23\0\2\7\1\0\1\7\1\u013d\26\7\53\0"+
    "\1\u013e\35\0\2\7\1\0\1\7\2\76\4\0\5\7"+
    "\23\0\2\7\1\0\11\7\1\u013f\16\7\6\0\2\7"+
    "\1\0\1\7\2\76\4\0\4\7\1\u0140\23\0\2\7"+
    "\1\0\30\7\6\0\2\7\1\0\1\7\2\76\4\0"+
    "\5\7\23\0\2\7\1\0\6\7\1\u0141\21\7\6\0"+
    "\2\7\1\0\1\7\2\76\4\0\1\u0142\4\7\23\0"+
    "\2\7\1\0\30\7\6\0\2\7\1\0\1\7\2\76"+
    "\4\0\4\7\1\u0143\23\0\2\7\1\0\30\7\6\0"+
    "\2\7\1\0\1\7\2\76\4\0\5\7\23\0\2\7"+
    "\1\0\5\7\1\u0144\22\7\6\0\2\7\1\0\1\7"+
    "\2\76\4\0\5\7\23\0\2\7\1\0\6\7\1\u0145"+
    "\21\7\6\0\2\7\1\0\1\7\2\76\4\0\5\7"+
    "\23\0\2\7\1\0\11\7\1\u0146\16\7\6\0\2\7"+
    "\1\0\1\7\2\76\4\0\4\7\1\u0147\23\0\2\7"+
    "\1\0\30\7\51\0\1\u0148\37\0\2\7\1\0\1\7"+
    "\2\76\4\0\4\7\1\u0149\23\0\2\7\1\0\30\7"+
    "\6\0\2\7\1\0\1\7\2\76\4\0\5\7\23\0"+
    "\2\7\1\0\1\7\1\u014a\26\7\6\0\2\7\1\0"+
    "\1\7\2\76\4\0\1\7\1\u014b\3\7\23\0\2\7"+
    "\1\0\30\7\6\0\2\7\1\0\1\7\2\76\4\0"+
    "\5\7\23\0\2\7\1\0\17\7\1\u014c\10\7\6\0"+
    "\2\u0131\6\0\1\317\1\224\5\u0131\23\0\2\u0131\1\0"+
    "\30\u0131\6\0\2\u014d\7\0\1\324\5\u014d\23\0\2\u014d"+
    "\1\0\30\u014d\6\0\2\u014e\10\0\5\u014e\23\0\2\u014e"+
    "\1\0\30\u014e\6\0\2\7\1\0\1\7\2\76\4\0"+
    "\5\7\1\u014f\1\u0150\21\0\2\7\1\0\30\7\6\0"+
    "\2\7\1\0\1\7\2\76\4\0\5\7\23\0\2\7"+
    "\1\0\4\7\1\u0151\23\7\51\0\1\u0152\37\0\2\7"+
    "\1\0\1\7\2\76\4\0\5\7\23\0\1\u0153\1\7"+
    "\1\0\30\7\6\0\2\7\1\0\1\7\2\76\4\0"+
    "\1\7\1\u0154\3\7\23\0\2\7\1\0\30\7\6\0"+
    "\2\7\1\0\1\7\2\76\4\0\5\7\23\0\2\7"+
    "\1\0\7\7\1\u0155\20\7\6\0\2\7\1\0\1\7"+
    "\2\76\4\0\5\7\1\u0156\22\0\2\7\1\0\30\7"+
    "\6\0\2\7\1\0\1\7\2\76\4\0\3\7\1\u0157"+
    "\1\7\23\0\2\7\1\0\30\7\6\0\2\7\1\0"+
    "\1\7\2\76\4\0\5\7\23\0\1\u0158\1\7\1\0"+
    "\30\7\23\0\1\u0159\65\0\2\7\1\0\1\7\2\76"+
    "\4\0\3\7\1\u015a\1\7\23\0\2\7\1\0\30\7"+
    "\6\0\2\7\1\0\1\7\2\76\4\0\1\u015b\4\7"+
    "\23\0\2\7\1\0\30\7\6\0\2\7\1\0\1\7"+
    "\2\76\4\0\5\7\23\0\1\u015c\1\7\1\0\30\7"+
    "\6\0\2\7\1\0\1\7\2\76\4\0\5\7\1\u015d"+
    "\22\0\2\7\1\0\30\7\6\0\2\7\1\0\1\7"+
    "\2\76\4\0\5\7\23\0\2\7\1\0\10\7\1\u015e"+
    "\17\7\6\0\2\7\1\0\1\7\2\76\4\0\5\7"+
    "\23\0\2\7\1\0\7\7\1\u015f\20\7\63\0\1\u0160"+
    "\25\0\2\7\1\0\1\7\2\76\4\0\4\7\1\u0161"+
    "\23\0\2\7\1\0\30\7\6\0\2\u014d\6\0\1\u0107"+
    "\1\324\5\u014d\23\0\2\u014d\1\0\30\u014d\6\0\2\u0162"+
    "\7\0\1\u010b\5\u0162\23\0\2\u0162\1\0\30\u0162\25\0"+
    "\1\u014f\1\u0150\62\0\2\7\1\0\1\7\2\76\4\0"+
    "\5\7\23\0\2\7\1\0\3\7\1\u0163\24\7\6\0"+
    "\2\7\1\0\1\7\2\76\4\0\5\7\23\0\2\7"+
    "\1\0\7\7\1\u0164\20\7\6\0\2\7\1\0\1\7"+
    "\2\76\4\0\5\7\1\u0165\22\0\2\7\1\0\30\7"+
    "\6\0\2\7\1\0\1\7\2\76\4\0\5\7\23\0"+
    "\2\7\1\0\1\7\1\u0166\26\7\51\0\1\u0167\37\0"+
    "\2\7\1\0\1\7\2\76\4\0\4\7\1\u0168\23\0"+
    "\2\7\1\0\30\7\6\0\2\7\1\0\1\7\2\76"+
    "\4\0\3\7\1\u0169\1\7\23\0\2\7\1\0\30\7"+
    "\50\0\1\u016a\40\0\2\7\1\0\1\7\2\76\4\0"+
    "\5\7\23\0\2\7\1\0\1\7\1\u016b\26\7\6\0"+
    "\2\7\1\0\1\7\2\76\4\0\5\7\23\0\2\7"+
    "\1\0\7\7\1\u016c\20\7\6\0\2\7\1\0\1\7"+
    "\2\76\4\0\5\7\23\0\2\7\1\0\1\u016d\27\7"+
    "\51\0\1\u016e\37\0\2\7\1\0\1\7\2\76\4\0"+
    "\1\7\1\u016f\3\7\23\0\2\7\1\0\30\7\6\0"+
    "\2\7\1\0\1\7\2\76\4\0\1\u0170\4\7\23\0"+
    "\2\7\1\0\30\7\64\0\1\u0171\24\0\2\u0162\6\0"+
    "\1\u0133\1\u010b\5\u0162\23\0\2\u0162\1\0\30\u0162\6\0"+
    "\2\7\1\0\1\7\2\76\4\0\5\7\23\0\2\7"+
    "\1\0\11\7\1\u0172\16\7\51\0\1\u0173\114\0\1\u0174"+
    "\25\0\2\7\1\0\1\7\2\76\4\0\1\7\1\u0175"+
    "\3\7\23\0\2\7\1\0\30\7\6\0\2\7\1\0"+
    "\1\7\2\76\4\0\5\7\23\0\2\7\1\0\3\7"+
    "\1\u0176\24\7\54\0\1\u0177\34\0\2\7\1\0\1\7"+
    "\2\76\4\0\5\7\1\u0178\22\0\2\7\1\0\30\7"+
    "\6\0\2\7\1\0\1\7\2\76\4\0\5\7\23\0"+
    "\2\7\1\0\10\7\1\u0179\17\7\6\0\2\7\1\0"+
    "\1\7\2\76\4\0\3\7\1\u017a\1\7\23\0\2\7"+
    "\1\0\30\7\63\0\1\u017b\77\0\1\u017c\105\0\1\u017d"+
    "\103\0\1\u017e\24\0\2\7\1\0\1\7\2\76\4\0"+
    "\5\7\23\0\2\7\1\0\13\7\1\u017f\14\7\23\0"+
    "\1\u0180\130\0\1\u0181\37\0\2\7\1\0\1\7\2\76"+
    "\4\0\5\7\23\0\2\7\1\0\17\7\1\u0182\10\7"+
    "\6\0\2\7\1\0\1\7\2\76\4\0\4\7\1\u0183"+
    "\23\0\2\7\1\0\30\7\64\0\1\u0184\102\0\1\u0185"+
    "\76\0\1\u0186\30\0\2\7\1\0\1\7\2\76\4\0"+
    "\4\7\1\u0187\23\0\2\7\1\0\30\7\55\0\1\u0188"+
    "\110\0\1\u0189\25\0\2\7\1\0\1\7\2\76\4\0"+
    "\5\7\23\0\2\7\1\0\6\7\1\u018a\21\7\6\0"+
    "\2\7\1\0\1\7\2\76\4\0\1\7\1\u018b\3\7"+
    "\23\0\2\7\1\0\30\7\60\0\1\u018c\102\0\1\u018d"+
    "\30\0\2\7\1\0\1\7\2\76\4\0\5\7\23\0"+
    "\2\7\1\0\14\7\1\u018e\13\7\54\0\1\u018f\112\0"+
    "\1\u0190\24\0\2\7\1\0\1\7\2\76\4\0\5\7"+
    "\1\u0191\22\0\2\7\1\0\30\7\6\0\2\7\1\0"+
    "\1\7\2\76\4\0\2\7\1\u0192\2\7\23\0\2\7"+
    "\1\0\30\7\21\0\1\u0193\141\0\1\u0194\73\0\1\u0195"+
    "\37\0\2\7\1\0\1\7\2\76\4\0\1\7\1\u0196"+
    "\3\7\23\0\2\7\1\0\30\7\63\0\1\u0197\103\0"+
    "\1\u0198\76\0\1\u0199\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20904];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\4\1\1\11\2\1\2\11"+
    "\5\1\1\11\12\1\7\11\23\1\1\11\1\1\1\11"+
    "\1\1\1\11\4\0\2\1\5\0\12\1\4\11\1\0"+
    "\1\1\2\11\1\1\1\11\1\1\1\11\1\1\4\11"+
    "\36\1\4\11\3\1\2\0\4\11\7\0\13\1\1\0"+
    "\3\11\1\0\42\1\3\11\1\0\1\1\2\0\1\11"+
    "\5\0\16\1\1\0\40\1\7\0\3\1\1\0\7\1"+
    "\1\0\21\1\1\0\7\1\3\0\3\1\1\0\6\1"+
    "\1\0\11\1\1\0\4\1\3\0\1\11\1\1\1\11"+
    "\3\1\1\0\2\1\1\0\3\1\1\0\2\1\1\0"+
    "\1\1\1\0\2\1\1\0\1\1\1\0\2\1\1\0"+
    "\3\1\1\0\2\1\1\0\1\1\2\0\2\1\2\0"+
    "\2\1\1\0\1\11\2\0\1\1\2\0\2\1\2\0"+
    "\1\11\1\1\2\0\2\1\2\11\1\1\3\0\1\1"+
    "\2\11\1\0\1\1\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[409];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	StringBuffer string = new StringBuffer();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analisador(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Analisador(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 158) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 28: 
          { return new Tokens("DOISPONTOS", yytext(), yyline, yycolumn,"Aplicado no operador ternário");
          }
        case 130: break;
        case 21: 
          { return new Tokens("BITOR", yytext(), yyline, yycolumn, "Operador OR binário: 1010 | 0011 = 1011");
          }
        case 131: break;
        case 127: 
          { return new Tokens("INTERNALFUNC", yytext(), yyline, yycolumn, "Permite que função sejam usadas em qualquer arquivo de origem de seu módulo de definição, mas não em qualquer arquivo de origem fora desse módulo.");
          }
        case 132: break;
        case 45: 
          { return new Tokens("MAIORIGUAL", yytext(), yyline, yycolumn, "Retorna true se o operando da esquerda for maior ou igual que o da direita: b>a");
          }
        case 133: break;
        case 51: 
          { return new Tokens("IF", yytext(), yyline, yycolumn, "Expressãos usadas para execução condicional. Os valores false e nil são falsos, e tudo o mais é verdade.");
          }
        case 134: break;
        case 29: 
          { yybegin(STRING); string.setLength(0);
          }
        case 135: break;
        case 88: 
          { return new Tokens("INOUT", yytext(), yyline, yycolumn, "Um valor que é passado para uma função e modificado por ela, e é passado de volta para fora da função para substituir o valor original");
          }
        case 136: break;
        case 110: 
          { return new Tokens("ELSEIF", yytext(), yyline, yycolumn, "Representa a execução de um comando quando a condição não é validada junto com outro condicional IF");
          }
        case 137: break;
        case 79: 
          { return new Tokens("TRUE", yytext(), yyline, yycolumn, "A única instância da classe TrueClass (valor verdadeiro típico)");
          }
        case 138: break;
        case 102: 
          { return new Tokens("IMPORT", yytext(), yyline, yycolumn, "Expõe uma estrutura ou aplicativo que é construído e enviado como uma única unidade no binário fornecido");
          }
        case 139: break;
        case 39: 
          { return new Tokens("MULTEQ", yytext(), yyline, yycolumn, "(a *= b) equivalente a (a = a * b)");
          }
        case 140: break;
        case 86: 
          { return new Tokens("BOOL", yytext(), yyline, yycolumn, "Define uma variavel ou retorno de uma função como Tipo Booleano podendo ser True ou False ");
          }
        case 141: break;
        case 58: 
          { string.append("\\");
          }
        case 142: break;
        case 11: 
          { return new Tokens("CHAVEABERTA", yytext(), yyline, yycolumn, "Usado para delimitar Hash: h = { 7 => 35, \"c\" => 2, \"a\" => 1 }");
          }
        case 143: break;
        case 112: 
          { return new Tokens("DEFAULT", yytext(), yyline, yycolumn, "Usado para cobrir quaisquer valores que não sejam explicitamente endereçados em um caso");
          }
        case 144: break;
        case 81: 
          { return new Tokens("FUNC", yytext(), yyline, yycolumn, "Pedaços de código autocontidos que executam uma tarefa específica");
          }
        case 145: break;
        case 126: 
          { return new Tokens("IFAVAILABLE", yytext(), yyline, yycolumn, "Expressãos usadas para verificar versão do dispositivo.");
          }
        case 146: break;
        case 117: 
          { return new Tokens("OPERATOR", yytext(), yyline, yycolumn, "Um símbolo ou frase especial que você usa para verificar, alterar ou combinar valores");
          }
        case 147: break;
        case 68: 
          { return new Tokens("VAR", yytext(), yyline, yycolumn, "Define uma variável como variável");
          }
        case 148: break;
        case 64: 
          { return new Tokens("IDENTIDADE", yytext(), yyline, yycolumn, "Verifica se duas instâncias de uma classe apontam para a mesma memoria:(classA == classA) retorna true, (classA == classB) retorna false");
          }
        case 149: break;
        case 123: 
          { return new Tokens("FILEPRIVATE", yytext(), yyline, yycolumn, "Uma construção de controle de acesso que restringe o escopo apenas ao arquivo de origem de definição");
          }
        case 150: break;
        case 75: 
          { string.append("\\n");
          }
        case 151: break;
        case 9: 
          { return new Tokens("VIRGULA", yytext(), yyline, yycolumn, "Usado para separar identificadores e dados: \"ary = [1, \"two\", 3.0]\" ou \"Array.new(3, true)\".");
          }
        case 152: break;
        case 70: 
          { return new Tokens("NIL", yytext(), yyline, yycolumn, "É equivalente a Nulo.a única instância da Classe NilClass (representa falso)");
          }
        case 153: break;
        case 31: 
          { yybegin(YYINITIAL);
                              return new Tokens
                           ("STRING", string.toString(), yyline, yycolumn, "String, sequência de caracteres.");
          }
        case 154: break;
        case 93: 
          { return new Tokens("WHILE", yytext(), yyline, yycolumn, "Executa o corpo enquanto a expressão de condição retorna verdadeira.");
          }
        case 155: break;
        case 57: 
          { string.append('\"');
          }
        case 156: break;
        case 77: 
          { return new Tokens("ELSE", yytext(), yyline, yycolumn, "Representa a execução de um comando quando a condição não é validada");
          }
        case 157: break;
        case 27: 
          { return new Tokens("PONTOVIRG", yytext(), yyline, yycolumn, "Delimitador de instrução, pode ser omitido.");
          }
        case 158: break;
        case 18: 
          { return new Tokens("MENOR", yytext(), yyline, yycolumn, "Retorna true se o operando da esquerda for menor que o da direita: a<b");
          }
        case 159: break;
        case 26: 
          { return new Tokens("PARENTESEFECHADO", yytext(), yyline, yycolumn, "Usado para limitar um conjundo de dados: \"(1 + 2)*5\" ou \"for a in (1..6)\"");
          }
        case 160: break;
        case 50: 
          { return new Tokens("ORBOOL", yytext(), yyline, yycolumn, "Operador lógico, retorna true se pelomenos um dos operandos forem true");
          }
        case 161: break;
        case 125: 
          { return new Tokens("FILEPRIVATEFUNC", yytext(), yyline, yycolumn, "restringe o uso da função à declaração anexa e às extensões dessa declaração que estão no mesmo arquivo..");
          }
        case 162: break;
        case 107: 
          { return new Tokens("DOUBLE", yytext(), yyline, yycolumn, "Define uma variavel ou retorno de uma função como Tipo decimal com dobro de precisão de um float 0.58545854, 1.325");
          }
        case 163: break;
        case 61: 
          { return new Tokens("NAOIDENTIDADE", yytext(), yyline, yycolumn, "Verifica se duas instâncias de uma classe não apontam para a mesma memoria:(classA == classA) retorna false, (classA == classB) retorna true");
          }
        case 164: break;
        case 73: 
          { string.append("\\r");
          }
        case 165: break;
        case 4: 
          { return new Tokens("INTEIRO", yytext(), yyline, yycolumn, "Valor de número inteiro.");
          }
        case 166: break;
        case 12: 
          { return new Tokens("SOMA", yytext(), yyline, yycolumn, "Operador de soma");
          }
        case 167: break;
        case 7: 
          { return new Tokens("PONTO", yytext(), yyline, yycolumn, "Usado para trabalhar com objetos: \"arr = Array.append(3)\" ou \"arr.remove(3)\".");
          }
        case 168: break;
        case 116: 
          { return new Tokens("CONTINUE", yytext(), yyline, yycolumn, "Termina a execução do programa da iteração atual de uma instrução de loop, mas não interrompe a execução da instrução de loop.");
          }
        case 169: break;
        case 6: 
          { return new Tokens("INTERROG", yytext(), yyline, yycolumn, "Aplicado noperador ternário ou valor opcional");
          }
        case 170: break;
        case 74: 
          { string.append("\\t");
          }
        case 171: break;
        case 122: 
          { return new Tokens("FALLTHROUGH", yytext(), yyline, yycolumn, "Permite explicitamente que a execução continue de um caso para o outro em uma switch instrução");
          }
        case 172: break;
        case 69: 
          { return new Tokens("LET", yytext(), yyline, yycolumn, "Define uma variável como imutável");
          }
        case 173: break;
        case 24: 
          { return new Tokens("CHAVEFECHADA", yytext(), yyline, yycolumn, "Usado para delimitar Hash: h = { 7 => 35, \"c\" => 2, \"a\" => 1 }");
          }
        case 174: break;
        case 53: 
          { return new Tokens("DO", yytext(), yyline, yycolumn, "Define uma estrutura de repetição sem condição" );
          }
        case 175: break;
        case 32: 
          { return new Tokens("IDENTIFICADOR_METODO", yytext(), yyline, yycolumn, "Identificador de métodos que utilizam ? ou ! no final");
          }
        case 176: break;
        case 100: 
          { return new Tokens("RETURN", yytext(), yyline, yycolumn, "Sai do método com o valor de retorno.");
          }
        case 177: break;
        case 124: 
          { return new Tokens("STATICFUNC", yytext(), yyline, yycolumn, "Define a função que são chamados na porpria class. Também usado para definir membros estáticos.");
          }
        case 178: break;
        case 19: 
          { return new Tokens("MAIOR", yytext(), yyline, yycolumn, "Retorna true se o operando da esquerda for maior que o da direita: b>a");
          }
        case 179: break;
        case 33: 
          { return new Tokens("DESIGUALDADE", yytext(), yyline, yycolumn, "Verifica se dois operandos são diferentes: (a == a) retorna false, (a == b) retorna true");
          }
        case 180: break;
        case 8: 
          { return new Tokens("COLCHETEABERTO", yytext(), yyline, yycolumn, "Usado em Arrays: ary = [1, \"two\", 3.0].");
          }
        case 181: break;
        case 14: 
          { return new Tokens("MULTIPLICACAO", yytext(), yyline, yycolumn, "Operador de multiplicação");
          }
        case 182: break;
        case 97: 
          { return new Tokens("GUARD", yytext(), yyline, yycolumn, "Usado para transferir o controle do programa para fora de um escopo se uma ou mais condições não forem atendidas, ao mesmo tempo que desembrulhará quaisquer valores opcionais fornecidos");
          }
        case 183: break;
        case 91: 
          { return new Tokens("SUPER", yytext(), yyline, yycolumn, "Chama o método que substitui o método atual");
          }
        case 184: break;
        case 43: 
          { return new Tokens("MENORIGUAL", yytext(), yyline, yycolumn, "Retorna true se o operando da esquerda for menor ou igual que o da direita: a<=b");
          }
        case 185: break;
        case 49: 
          { return new Tokens("OREQ", yytext(), yyline, yycolumn, "Retorna e atribui true se pelomenos um dos operandos for true: A |= B é equivalente a A = A | B" );
          }
        case 186: break;
        case 103: 
          { return new Tokens("STRUCT", yytext(), yyline, yycolumn, "Uma construção flexível de uso geral que se torna os blocos de construção do código do seu programa e também pode fornecer inicializadores inteligentes de membros");
          }
        case 187: break;
        case 111: 
          { return new Tokens("PRIVATE", yytext(), yyline, yycolumn, "Uma construção de controle de acesso que permite que as entidades tenham como escopo sua declaração de definição");
          }
        case 188: break;
        case 60: 
          { return new Tokens("CARACTERE", yytext(), yyline, yycolumn, "Um caractere como as letras a,b,c");
          }
        case 189: break;
        case 129: 
          { return new Tokens("FILEPRIVATEFUNC", yytext(), yyline, yycolumn, "Permite que função sejam usadas em qualquer arquivo de origem de seu módulo de definição, mas não em qualquer arquivo de origem fora desse módulo.");
          }
        case 190: break;
        case 121: 
          { return new Tokens("PUBLICFUNC", yytext(), yyline, yycolumn, "Permitem que a função seja usada em qualquer arquivo de origem de seu módulo de definição e também em um arquivo de origem de outro módulo que importa o módulo de definição.");
          }
        case 191: break;
        case 128: 
          { return new Tokens("ASSOCIATEDTYPE", yytext(), yyline, yycolumn, "Dá um nome de espaço reservado para um tipo que é usado como parte de um protocolo");
          }
        case 192: break;
        case 23: 
          { return new Tokens("BITCOMP", yytext(), yyline, yycolumn, "Operador de complemento binário: ~10 retorna -11");
          }
        case 193: break;
        case 84: 
          { return new Tokens("OPEN", yytext(), yyline, yycolumn, "Uma construção de controle de acesso que permite que os objetos sejam acessíveis e subclassíveis fora de seu módulo de definiçãoa");
          }
        case 194: break;
        case 106: 
          { return new Tokens("DEINIT", yytext(), yyline, yycolumn, "Chamado imediatamente antes de uma instância de classe ser desalocada");
          }
        case 195: break;
        case 90: 
          { return new Tokens("BREAK", yytext(), yyline, yycolumn, "Sai do loop mais interno. O break não sai da expressão case");
          }
        case 196: break;
        case 95: 
          { return new Tokens("CLASS", yytext(), yyline, yycolumn, "Define uma nova classe.");
          }
        case 197: break;
        case 115: 
          { return new Tokens("INTERNAL", yytext(), yyline, yycolumn, "Permite que as entidades sejam usadas em qualquer arquivo de origem de seu módulo de definição, mas não em qualquer arquivo de origem fora desse módulo");
          }
        case 198: break;
        case 89: 
          { return new Tokens("FALSE", yytext(), yyline, yycolumn, "A única instância da classe FalseClass (representa falso)");
          }
        case 199: break;
        case 94: 
          { return new Tokens("CATCH", yytext(), yyline, yycolumn, "Usado em tratamento de erros");
          }
        case 200: break;
        case 56: 
          { string.append("\n");
          }
        case 201: break;
        case 119: 
          { return new Tokens("TYPEALIAS", yytext(), yyline, yycolumn, "Introduz um alias nomeado de um tipo existente em seu programa");
          }
        case 202: break;
        case 65: 
          { return new Tokens("SHIFTLEQ", yytext(), yyline, yycolumn, "Left Shift com atribuição: A <<= B é equivalente a A = A << B");
          }
        case 203: break;
        case 113: 
          { return new Tokens("RETHROWS", yytext(), yyline, yycolumn, " Indica que a função gera um erro apenas se um de seus parâmetros de função gerar um erro");
          }
        case 204: break;
        case 82: 
          { return new Tokens("SELF", yytext(), yyline, yycolumn, "O receptor do método atual");
          }
        case 205: break;
        case 120: 
          { return new Tokens("OPENFUNC", yytext(), yyline, yycolumn, "Permitem que a função seja usada em qualquer arquivo de origem de seu módulo de definição e também em um arquivo de origem de outro módulo que importa o módulo de definição.");
          }
        case 206: break;
        case 85: 
          { return new Tokens("CHAR", yytext(), yyline, yycolumn, "Define uma variavel ou retorno de uma função como Tipo Caractere por exemplo a letra a, b ou c");
          }
        case 207: break;
        case 99: 
          { return new Tokens("REPEAT", yytext(), yyline, yycolumn, "Executa uma única passagem pelo bloco do loop primeiro, antes de considerar a condição do loop");
          }
        case 208: break;
        case 109: 
          { return new Tokens("REPEATWHILE", yytext(), yyline, yycolumn, "Define uma estrutura de repetição sem condição" );
          }
        case 209: break;
        case 48: 
          { return new Tokens("ANDBOOL", yytext(), yyline, yycolumn, "Operador lógico AND: (a==true && b==true) retorna true ");
          }
        case 210: break;
        case 71: 
          { return new Tokens("ANY", yytext(), yyline, yycolumn, "Pode ser usado para representar uma instância de qualquer tipo, incluindo tipos de função");
          }
        case 211: break;
        case 37: 
          { return new Tokens("SUBEQ", yytext(), yyline, yycolumn, "(a -= b) equivalente a (a = a - b)");
          }
        case 212: break;
        case 47: 
          { return new Tokens("BITANDEQ", yytext(), yyline, yycolumn, "Operador AND binário com atribuição, sendo a=10 e b=3, a recebe o valor 2: a &= b, a == 2 ");
          }
        case 213: break;
        case 108: 
          { return new Tokens("STRING", yytext(), yyline, yycolumn, "Define uma variavel ou retorno de uma função como Tipo String nome casa");
          }
        case 214: break;
        case 5: 
          { return new Tokens("NOT", yytext(), yyline, yycolumn, "Inverte o estado da lógica do operando: !true é equivalente a false");
          }
        case 215: break;
        case 34: 
          { return new Tokens("DECIMAL", yytext(), yyline, yycolumn, "Valor de número decimal");
          }
        case 216: break;
        case 54: 
          { string.append("\r");
          }
        case 217: break;
        case 10: 
          { return new Tokens("COLCHETEFECHADO", yytext(), yyline, yycolumn, "Usado em Arrays: ary = [1, \"two\", 3.0].");
          }
        case 218: break;
        case 96: 
          { return new Tokens("DEFER", yytext(), yyline, yycolumn, "Usado para executar o código antes de transferir o controle do programa para fora do escopo em que aparece");
          }
        case 219: break;
        case 44: 
          { return new Tokens("SHIFTL", yytext(), yyline, yycolumn, "Left Shift, faz o deslocamento binário a esquerda, ocorrendo uma multiplicação: 10<<1 == 20");
          }
        case 220: break;
        case 78: 
          { return new Tokens("ENUM", yytext(), yyline, yycolumn, "Define um tipo comum para um grupo de valores relacionados e permite que você trabalhe com esses valores de uma forma de segurança de tipo em seu código");
          }
        case 221: break;
        case 46: 
          { return new Tokens("SHIFTR", yytext(), yyline, yycolumn, "Left Right, faz o deslocamento binário a direita, ocorrendo uam divisão: 10>>1 == 5");
          }
        case 222: break;
        case 13: 
          { return new Tokens("SUBTRACAO", yytext(), yyline, yycolumn, "Operador de subtração");
          }
        case 223: break;
        case 20: 
          { return new Tokens("BITAND", yytext(), yyline, yycolumn, "Operador AND binário: 1010 & 0011 = 0010");
          }
        case 224: break;
        case 22: 
          { return new Tokens("BITXOR", yytext(), yyline, yycolumn, "Operador binário XOR: 1010 ^ 0011 = 1001");
          }
        case 225: break;
        case 55: 
          { string.append("\t");
          }
        case 226: break;
        case 72: 
          { return new Tokens("Int", yytext(), yyline, yycolumn, "Define uma variavel ou retorno de uma função como Tipo Inteiro como 0,1,2,3 ...");
          }
        case 227: break;
        case 35: 
          { return new Tokens("ARRAY", yytext(), yyline, yycolumn, "Array de valores");
          }
        case 228: break;
        case 62: 
          { return new Tokens("INTERVALOFECHADO", yytext(), yyline, yycolumn, "Retorna um intervalo de valor fechado por exemplo 1..3 retorna os valores 1,2,3" );
          }
        case 229: break;
        case 118: 
          { return new Tokens("EXTENSION", yytext(), yyline, yycolumn, "Permite adicionar uma nova funcionalidade a uma classe, estrutura, enumeração ou tipo de protocolo existente");
          }
        case 230: break;
        case 114: 
          { return new Tokens("PROTOCOL", yytext(), yyline, yycolumn, "Equivalente ao conceito de interface em outras linguagens");
          }
        case 231: break;
        case 105: 
          { return new Tokens("SWITCH", yytext(), yyline, yycolumn, "Considera um valor e o compara com vários padrões de correspondência possíveis");
          }
        case 232: break;
        case 87: 
          { return new Tokens("PRINT", yytext(), yyline, yycolumn, "Função utilizada para imprimir coisas no console da IDE exemplo print(2)");
          }
        case 233: break;
        case 80: 
          { return new Tokens("INIT", yytext(), yyline, yycolumn, "São chamados para criar uma nova instância de um tipo específico");
          }
        case 234: break;
        case 2: 
          { /* ignore */
          }
        case 235: break;
        case 98: 
          { return new Tokens("FLOAT", yytext(), yyline, yycolumn, "Define uma variavel ou retorno de uma função como Tipo decimal como 0.5, 1.325");
          }
        case 236: break;
        case 92: 
          { return new Tokens("WHERE", yytext(), yyline, yycolumn, "Requer que um tipo associado esteja em conformidade com um determinado protocolo ou que determinados parâmetros de tipo e tipos associados sejam os mesmos");
          }
        case 237: break;
        case 67: 
          { return new Tokens("FOR", yytext(), yyline, yycolumn, "Palavra para estrutura de repetição, Executa o corpo para cada elemento no resultado da expressão.");
          }
        case 238: break;
        case 76: 
          { return new Tokens("MATRIX", yytext(), yyline, yycolumn, "Matrix de valores");
          }
        case 239: break;
        case 42: 
          { return new Tokens("IGUALDADE", yytext(), yyline, yycolumn, "Verifica se dois operandos são iguais: (a == a) retorna true, (a == b) retorna false");
          }
        case 240: break;
        case 16: 
          { return new Tokens("MODULO", yytext(), yyline, yycolumn, "Operador de modulo, retorna o resto de ums divisão");
          }
        case 241: break;
        case 3: 
          { return new Tokens("IDENTIFICADOR", yytext(), yyline, yycolumn, "Identificador de métodos, variáveis, constantes, etc");
          }
        case 242: break;
        case 30: 
          { string.append( yytext() );
          }
        case 243: break;
        case 1: 
          { throw new RuntimeException("Caractere inválido " + yytext() + " na linha " + (yyline+1) + ", coluna " +(yycolumn+1));
          }
        case 244: break;
        case 83: 
          { return new Tokens("CASE", yytext(), yyline, yycolumn, "As case expressões também são para execução condicional. sendo que suas comparações equivale ao mesmo que ===.");
          }
        case 245: break;
        case 63: 
          { return new Tokens("INTERVALOSEMIABERTO", yytext(), yyline, yycolumn, "Retorna um intervalo de valor semiaberto, pois não retorna o ultimo por exemplo 1..3 retorna os valores 1,2" );
          }
        case 246: break;
        case 25: 
          { return new Tokens("PARENTESEABERTO", yytext(), yyline, yycolumn, "Usado para limitar um conjundo de dados: \"(1 + 2)*5\" ou \"for a in (1..6)\"");
          }
        case 247: break;
        case 66: 
          { return new Tokens("SHIFTREQ", yytext(), yyline, yycolumn, "Right Shift com atribuição: A >>= B é equivalente a A = A >> B");
          }
        case 248: break;
        case 15: 
          { return new Tokens("DIVISAO", yytext(), yyline, yycolumn, "Operador de divisão");
          }
        case 249: break;
        case 40: 
          { return new Tokens("DIVEQ", yytext(), yyline, yycolumn, "(a /= b) equivalente a (a = a / b)");
          }
        case 250: break;
        case 36: 
          { return new Tokens("PLUSEQ", yytext(), yyline, yycolumn, "(a += b) equivalente a (a = a + b)");
          }
        case 251: break;
        case 101: 
          { return new Tokens("PUBLIC", yytext(), yyline, yycolumn, "Permitem que as entidades sejam usadas em qualquer arquivo de origem de seu módulo de definição e também em um arquivo de origem de outro módulo que importa o módulo de definição.");
          }
        case 252: break;
        case 104: 
          { return new Tokens("STATIC", yytext(), yyline, yycolumn, "Define métodos que são chamados no próprio tipo. Também usado para definir membros estáticos.");
          }
        case 253: break;
        case 41: 
          { return new Tokens("MODEQ", yytext(), yyline, yycolumn, "(a %= b) equivalente a (a = a % b)");
          }
        case 254: break;
        case 17: 
          { return new Tokens("ATRIBUICAO", yytext(), yyline, yycolumn, "Atribuição de valores");
          }
        case 255: break;
        case 59: 
          { return new Tokens("NOTACAO_CIENTIFICA", yytext(), yyline, yycolumn, "Escrita de notação científica");
          }
        case 256: break;
        case 38: 
          { return new Tokens("RETORNOFUNCAO", yytext(), yyline, yycolumn, "Precede o tipo de retorno de uma função func a () -> String" );
          }
        case 257: break;
        case 52: 
          { return new Tokens("IN", yytext(), yyline, yycolumn, "Define um contado para uma estrutura de Repetição For");
          }
        case 258: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
